// Copyright 2016 The Bazel Authors. All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//    http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: build_event_stream.proto

package buildeventstream

import (
	bep_proto "bazel-wsl/bep_proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Enumeration type characterizing the size of a test, as specified by the
// test rule.
type TestSize int32

const (
	TestSize_UNKNOWN  TestSize = 0
	TestSize_SMALL    TestSize = 1
	TestSize_MEDIUM   TestSize = 2
	TestSize_LARGE    TestSize = 3
	TestSize_ENORMOUS TestSize = 4
)

// Enum value maps for TestSize.
var (
	TestSize_name = map[int32]string{
		0: "UNKNOWN",
		1: "SMALL",
		2: "MEDIUM",
		3: "LARGE",
		4: "ENORMOUS",
	}
	TestSize_value = map[string]int32{
		"UNKNOWN":  0,
		"SMALL":    1,
		"MEDIUM":   2,
		"LARGE":    3,
		"ENORMOUS": 4,
	}
)

func (x TestSize) Enum() *TestSize {
	p := new(TestSize)
	*p = x
	return p
}

func (x TestSize) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestSize) Descriptor() protoreflect.EnumDescriptor {
	return file_build_event_stream_proto_enumTypes[0].Descriptor()
}

func (TestSize) Type() protoreflect.EnumType {
	return &file_build_event_stream_proto_enumTypes[0]
}

func (x TestSize) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestSize.Descriptor instead.
func (TestSize) EnumDescriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0}
}

type TestStatus int32

const (
	TestStatus_NO_STATUS                  TestStatus = 0
	TestStatus_PASSED                     TestStatus = 1
	TestStatus_FLAKY                      TestStatus = 2
	TestStatus_TIMEOUT                    TestStatus = 3
	TestStatus_FAILED                     TestStatus = 4
	TestStatus_INCOMPLETE                 TestStatus = 5
	TestStatus_REMOTE_FAILURE             TestStatus = 6
	TestStatus_FAILED_TO_BUILD            TestStatus = 7
	TestStatus_TOOL_HALTED_BEFORE_TESTING TestStatus = 8
)

// Enum value maps for TestStatus.
var (
	TestStatus_name = map[int32]string{
		0: "NO_STATUS",
		1: "PASSED",
		2: "FLAKY",
		3: "TIMEOUT",
		4: "FAILED",
		5: "INCOMPLETE",
		6: "REMOTE_FAILURE",
		7: "FAILED_TO_BUILD",
		8: "TOOL_HALTED_BEFORE_TESTING",
	}
	TestStatus_value = map[string]int32{
		"NO_STATUS":                  0,
		"PASSED":                     1,
		"FLAKY":                      2,
		"TIMEOUT":                    3,
		"FAILED":                     4,
		"INCOMPLETE":                 5,
		"REMOTE_FAILURE":             6,
		"FAILED_TO_BUILD":            7,
		"TOOL_HALTED_BEFORE_TESTING": 8,
	}
)

func (x TestStatus) Enum() *TestStatus {
	p := new(TestStatus)
	*p = x
	return p
}

func (x TestStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TestStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_build_event_stream_proto_enumTypes[1].Descriptor()
}

func (TestStatus) Type() protoreflect.EnumType {
	return &file_build_event_stream_proto_enumTypes[1]
}

func (x TestStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TestStatus.Descriptor instead.
func (TestStatus) EnumDescriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{1}
}

type Aborted_AbortReason int32

const (
	Aborted_UNKNOWN Aborted_AbortReason = 0
	// The user requested the build to be aborted (e.g., by hitting Ctl-C).
	Aborted_USER_INTERRUPTED Aborted_AbortReason = 1
	// The user requested that no analysis be performed.
	Aborted_NO_ANALYZE Aborted_AbortReason = 8
	// The user requested that no build be carried out.
	Aborted_NO_BUILD Aborted_AbortReason = 9
	// The build or target was aborted as a timeout was exceeded.
	Aborted_TIME_OUT Aborted_AbortReason = 2
	// The build or target was aborted as some remote environment (e.g., for
	// remote execution of actions) was not available in the expected way.
	Aborted_REMOTE_ENVIRONMENT_FAILURE Aborted_AbortReason = 3
	// Failure due to reasons entirely internal to the build tool, i.e. an
	// unexpected crash due to programmer error.
	Aborted_INTERNAL Aborted_AbortReason = 4
	// A Failure occurred in the loading phase of a target.
	Aborted_LOADING_FAILURE Aborted_AbortReason = 5
	// A Failure occurred in the analysis phase of a target.
	Aborted_ANALYSIS_FAILURE Aborted_AbortReason = 6
	// Target build was skipped (e.g. due to incompatible CPU constraints).
	Aborted_SKIPPED Aborted_AbortReason = 7
	// Build incomplete due to an earlier build failure (e.g. --keep_going was
	// set to false causing the build be ended upon failure).
	Aborted_INCOMPLETE Aborted_AbortReason = 10
	// The build tool ran out of memory and crashed.
	Aborted_OUT_OF_MEMORY Aborted_AbortReason = 11
)

// Enum value maps for Aborted_AbortReason.
var (
	Aborted_AbortReason_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "USER_INTERRUPTED",
		8:  "NO_ANALYZE",
		9:  "NO_BUILD",
		2:  "TIME_OUT",
		3:  "REMOTE_ENVIRONMENT_FAILURE",
		4:  "INTERNAL",
		5:  "LOADING_FAILURE",
		6:  "ANALYSIS_FAILURE",
		7:  "SKIPPED",
		10: "INCOMPLETE",
		11: "OUT_OF_MEMORY",
	}
	Aborted_AbortReason_value = map[string]int32{
		"UNKNOWN":                    0,
		"USER_INTERRUPTED":           1,
		"NO_ANALYZE":                 8,
		"NO_BUILD":                   9,
		"TIME_OUT":                   2,
		"REMOTE_ENVIRONMENT_FAILURE": 3,
		"INTERNAL":                   4,
		"LOADING_FAILURE":            5,
		"ANALYSIS_FAILURE":           6,
		"SKIPPED":                    7,
		"INCOMPLETE":                 10,
		"OUT_OF_MEMORY":              11,
	}
)

func (x Aborted_AbortReason) Enum() *Aborted_AbortReason {
	p := new(Aborted_AbortReason)
	*p = x
	return p
}

func (x Aborted_AbortReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Aborted_AbortReason) Descriptor() protoreflect.EnumDescriptor {
	return file_build_event_stream_proto_enumTypes[2].Descriptor()
}

func (Aborted_AbortReason) Type() protoreflect.EnumType {
	return &file_build_event_stream_proto_enumTypes[2]
}

func (x Aborted_AbortReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Aborted_AbortReason.Descriptor instead.
func (Aborted_AbortReason) EnumDescriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{2, 0}
}

type ConvenienceSymlink_Action int32

const (
	ConvenienceSymlink_UNKNOWN ConvenienceSymlink_Action = 0
	// Indicates a symlink should be created, or overwritten if it already
	// exists.
	ConvenienceSymlink_CREATE ConvenienceSymlink_Action = 1
	// Indicates a symlink should be deleted if it already exists.
	ConvenienceSymlink_DELETE ConvenienceSymlink_Action = 2
)

// Enum value maps for ConvenienceSymlink_Action.
var (
	ConvenienceSymlink_Action_name = map[int32]string{
		0: "UNKNOWN",
		1: "CREATE",
		2: "DELETE",
	}
	ConvenienceSymlink_Action_value = map[string]int32{
		"UNKNOWN": 0,
		"CREATE":  1,
		"DELETE":  2,
	}
)

func (x ConvenienceSymlink_Action) Enum() *ConvenienceSymlink_Action {
	p := new(ConvenienceSymlink_Action)
	*p = x
	return p
}

func (x ConvenienceSymlink_Action) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConvenienceSymlink_Action) Descriptor() protoreflect.EnumDescriptor {
	return file_build_event_stream_proto_enumTypes[3].Descriptor()
}

func (ConvenienceSymlink_Action) Type() protoreflect.EnumType {
	return &file_build_event_stream_proto_enumTypes[3]
}

func (x ConvenienceSymlink_Action) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConvenienceSymlink_Action.Descriptor instead.
func (ConvenienceSymlink_Action) EnumDescriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{25, 0}
}

// Identifier for a build event. It is deliberately structured to also provide
// information about which build target etc the event is related to.
//
// Events are chained via the event id as follows: each event has an id and a
// set of ids of children events such that apart from the initial event each
// event has an id that is mentioned as child id in an earlier event and a build
// invocation is complete if and only if all direct and indirect children of the
// initial event have been posted.
type BuildEventId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Id:
	//	*BuildEventId_Unknown
	//	*BuildEventId_Progress
	//	*BuildEventId_Started
	//	*BuildEventId_UnstructuredCommandLine
	//	*BuildEventId_StructuredCommandLine
	//	*BuildEventId_WorkspaceStatus
	//	*BuildEventId_OptionsParsed
	//	*BuildEventId_Fetch
	//	*BuildEventId_Configuration
	//	*BuildEventId_TargetConfigured
	//	*BuildEventId_Pattern
	//	*BuildEventId_PatternSkipped
	//	*BuildEventId_NamedSet
	//	*BuildEventId_TargetCompleted
	//	*BuildEventId_ActionCompleted
	//	*BuildEventId_UnconfiguredLabel
	//	*BuildEventId_ConfiguredLabel
	//	*BuildEventId_TestResult
	//	*BuildEventId_TestSummary
	//	*BuildEventId_TargetSummary
	//	*BuildEventId_BuildFinished
	//	*BuildEventId_BuildToolLogs
	//	*BuildEventId_BuildMetrics
	//	*BuildEventId_Workspace
	//	*BuildEventId_BuildMetadata
	//	*BuildEventId_ConvenienceSymlinksIdentified
	Id isBuildEventId_Id `protobuf_oneof:"id"`
}

func (x *BuildEventId) Reset() {
	*x = BuildEventId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId) ProtoMessage() {}

func (x *BuildEventId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId.ProtoReflect.Descriptor instead.
func (*BuildEventId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0}
}

func (m *BuildEventId) GetId() isBuildEventId_Id {
	if m != nil {
		return m.Id
	}
	return nil
}

func (x *BuildEventId) GetUnknown() *BuildEventId_UnknownBuildEventId {
	if x, ok := x.GetId().(*BuildEventId_Unknown); ok {
		return x.Unknown
	}
	return nil
}

func (x *BuildEventId) GetProgress() *BuildEventId_ProgressId {
	if x, ok := x.GetId().(*BuildEventId_Progress); ok {
		return x.Progress
	}
	return nil
}

func (x *BuildEventId) GetStarted() *BuildEventId_BuildStartedId {
	if x, ok := x.GetId().(*BuildEventId_Started); ok {
		return x.Started
	}
	return nil
}

func (x *BuildEventId) GetUnstructuredCommandLine() *BuildEventId_UnstructuredCommandLineId {
	if x, ok := x.GetId().(*BuildEventId_UnstructuredCommandLine); ok {
		return x.UnstructuredCommandLine
	}
	return nil
}

func (x *BuildEventId) GetStructuredCommandLine() *BuildEventId_StructuredCommandLineId {
	if x, ok := x.GetId().(*BuildEventId_StructuredCommandLine); ok {
		return x.StructuredCommandLine
	}
	return nil
}

func (x *BuildEventId) GetWorkspaceStatus() *BuildEventId_WorkspaceStatusId {
	if x, ok := x.GetId().(*BuildEventId_WorkspaceStatus); ok {
		return x.WorkspaceStatus
	}
	return nil
}

func (x *BuildEventId) GetOptionsParsed() *BuildEventId_OptionsParsedId {
	if x, ok := x.GetId().(*BuildEventId_OptionsParsed); ok {
		return x.OptionsParsed
	}
	return nil
}

func (x *BuildEventId) GetFetch() *BuildEventId_FetchId {
	if x, ok := x.GetId().(*BuildEventId_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *BuildEventId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x, ok := x.GetId().(*BuildEventId_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (x *BuildEventId) GetTargetConfigured() *BuildEventId_TargetConfiguredId {
	if x, ok := x.GetId().(*BuildEventId_TargetConfigured); ok {
		return x.TargetConfigured
	}
	return nil
}

func (x *BuildEventId) GetPattern() *BuildEventId_PatternExpandedId {
	if x, ok := x.GetId().(*BuildEventId_Pattern); ok {
		return x.Pattern
	}
	return nil
}

func (x *BuildEventId) GetPatternSkipped() *BuildEventId_PatternExpandedId {
	if x, ok := x.GetId().(*BuildEventId_PatternSkipped); ok {
		return x.PatternSkipped
	}
	return nil
}

func (x *BuildEventId) GetNamedSet() *BuildEventId_NamedSetOfFilesId {
	if x, ok := x.GetId().(*BuildEventId_NamedSet); ok {
		return x.NamedSet
	}
	return nil
}

func (x *BuildEventId) GetTargetCompleted() *BuildEventId_TargetCompletedId {
	if x, ok := x.GetId().(*BuildEventId_TargetCompleted); ok {
		return x.TargetCompleted
	}
	return nil
}

func (x *BuildEventId) GetActionCompleted() *BuildEventId_ActionCompletedId {
	if x, ok := x.GetId().(*BuildEventId_ActionCompleted); ok {
		return x.ActionCompleted
	}
	return nil
}

func (x *BuildEventId) GetUnconfiguredLabel() *BuildEventId_UnconfiguredLabelId {
	if x, ok := x.GetId().(*BuildEventId_UnconfiguredLabel); ok {
		return x.UnconfiguredLabel
	}
	return nil
}

func (x *BuildEventId) GetConfiguredLabel() *BuildEventId_ConfiguredLabelId {
	if x, ok := x.GetId().(*BuildEventId_ConfiguredLabel); ok {
		return x.ConfiguredLabel
	}
	return nil
}

func (x *BuildEventId) GetTestResult() *BuildEventId_TestResultId {
	if x, ok := x.GetId().(*BuildEventId_TestResult); ok {
		return x.TestResult
	}
	return nil
}

func (x *BuildEventId) GetTestSummary() *BuildEventId_TestSummaryId {
	if x, ok := x.GetId().(*BuildEventId_TestSummary); ok {
		return x.TestSummary
	}
	return nil
}

func (x *BuildEventId) GetTargetSummary() *BuildEventId_TargetSummaryId {
	if x, ok := x.GetId().(*BuildEventId_TargetSummary); ok {
		return x.TargetSummary
	}
	return nil
}

func (x *BuildEventId) GetBuildFinished() *BuildEventId_BuildFinishedId {
	if x, ok := x.GetId().(*BuildEventId_BuildFinished); ok {
		return x.BuildFinished
	}
	return nil
}

func (x *BuildEventId) GetBuildToolLogs() *BuildEventId_BuildToolLogsId {
	if x, ok := x.GetId().(*BuildEventId_BuildToolLogs); ok {
		return x.BuildToolLogs
	}
	return nil
}

func (x *BuildEventId) GetBuildMetrics() *BuildEventId_BuildMetricsId {
	if x, ok := x.GetId().(*BuildEventId_BuildMetrics); ok {
		return x.BuildMetrics
	}
	return nil
}

func (x *BuildEventId) GetWorkspace() *BuildEventId_WorkspaceConfigId {
	if x, ok := x.GetId().(*BuildEventId_Workspace); ok {
		return x.Workspace
	}
	return nil
}

func (x *BuildEventId) GetBuildMetadata() *BuildEventId_BuildMetadataId {
	if x, ok := x.GetId().(*BuildEventId_BuildMetadata); ok {
		return x.BuildMetadata
	}
	return nil
}

func (x *BuildEventId) GetConvenienceSymlinksIdentified() *BuildEventId_ConvenienceSymlinksIdentifiedId {
	if x, ok := x.GetId().(*BuildEventId_ConvenienceSymlinksIdentified); ok {
		return x.ConvenienceSymlinksIdentified
	}
	return nil
}

type isBuildEventId_Id interface {
	isBuildEventId_Id()
}

type BuildEventId_Unknown struct {
	Unknown *BuildEventId_UnknownBuildEventId `protobuf:"bytes,1,opt,name=unknown,proto3,oneof"`
}

type BuildEventId_Progress struct {
	Progress *BuildEventId_ProgressId `protobuf:"bytes,2,opt,name=progress,proto3,oneof"`
}

type BuildEventId_Started struct {
	Started *BuildEventId_BuildStartedId `protobuf:"bytes,3,opt,name=started,proto3,oneof"`
}

type BuildEventId_UnstructuredCommandLine struct {
	UnstructuredCommandLine *BuildEventId_UnstructuredCommandLineId `protobuf:"bytes,11,opt,name=unstructured_command_line,json=unstructuredCommandLine,proto3,oneof"`
}

type BuildEventId_StructuredCommandLine struct {
	StructuredCommandLine *BuildEventId_StructuredCommandLineId `protobuf:"bytes,18,opt,name=structured_command_line,json=structuredCommandLine,proto3,oneof"`
}

type BuildEventId_WorkspaceStatus struct {
	WorkspaceStatus *BuildEventId_WorkspaceStatusId `protobuf:"bytes,14,opt,name=workspace_status,json=workspaceStatus,proto3,oneof"`
}

type BuildEventId_OptionsParsed struct {
	OptionsParsed *BuildEventId_OptionsParsedId `protobuf:"bytes,12,opt,name=options_parsed,json=optionsParsed,proto3,oneof"`
}

type BuildEventId_Fetch struct {
	Fetch *BuildEventId_FetchId `protobuf:"bytes,17,opt,name=fetch,proto3,oneof"`
}

type BuildEventId_Configuration struct {
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,15,opt,name=configuration,proto3,oneof"`
}

type BuildEventId_TargetConfigured struct {
	TargetConfigured *BuildEventId_TargetConfiguredId `protobuf:"bytes,16,opt,name=target_configured,json=targetConfigured,proto3,oneof"`
}

type BuildEventId_Pattern struct {
	Pattern *BuildEventId_PatternExpandedId `protobuf:"bytes,4,opt,name=pattern,proto3,oneof"`
}

type BuildEventId_PatternSkipped struct {
	PatternSkipped *BuildEventId_PatternExpandedId `protobuf:"bytes,10,opt,name=pattern_skipped,json=patternSkipped,proto3,oneof"`
}

type BuildEventId_NamedSet struct {
	NamedSet *BuildEventId_NamedSetOfFilesId `protobuf:"bytes,13,opt,name=named_set,json=namedSet,proto3,oneof"`
}

type BuildEventId_TargetCompleted struct {
	TargetCompleted *BuildEventId_TargetCompletedId `protobuf:"bytes,5,opt,name=target_completed,json=targetCompleted,proto3,oneof"`
}

type BuildEventId_ActionCompleted struct {
	ActionCompleted *BuildEventId_ActionCompletedId `protobuf:"bytes,6,opt,name=action_completed,json=actionCompleted,proto3,oneof"`
}

type BuildEventId_UnconfiguredLabel struct {
	UnconfiguredLabel *BuildEventId_UnconfiguredLabelId `protobuf:"bytes,19,opt,name=unconfigured_label,json=unconfiguredLabel,proto3,oneof"`
}

type BuildEventId_ConfiguredLabel struct {
	ConfiguredLabel *BuildEventId_ConfiguredLabelId `protobuf:"bytes,21,opt,name=configured_label,json=configuredLabel,proto3,oneof"`
}

type BuildEventId_TestResult struct {
	TestResult *BuildEventId_TestResultId `protobuf:"bytes,8,opt,name=test_result,json=testResult,proto3,oneof"`
}

type BuildEventId_TestSummary struct {
	TestSummary *BuildEventId_TestSummaryId `protobuf:"bytes,7,opt,name=test_summary,json=testSummary,proto3,oneof"`
}

type BuildEventId_TargetSummary struct {
	TargetSummary *BuildEventId_TargetSummaryId `protobuf:"bytes,26,opt,name=target_summary,json=targetSummary,proto3,oneof"`
}

type BuildEventId_BuildFinished struct {
	BuildFinished *BuildEventId_BuildFinishedId `protobuf:"bytes,9,opt,name=build_finished,json=buildFinished,proto3,oneof"`
}

type BuildEventId_BuildToolLogs struct {
	BuildToolLogs *BuildEventId_BuildToolLogsId `protobuf:"bytes,20,opt,name=build_tool_logs,json=buildToolLogs,proto3,oneof"`
}

type BuildEventId_BuildMetrics struct {
	BuildMetrics *BuildEventId_BuildMetricsId `protobuf:"bytes,22,opt,name=build_metrics,json=buildMetrics,proto3,oneof"`
}

type BuildEventId_Workspace struct {
	Workspace *BuildEventId_WorkspaceConfigId `protobuf:"bytes,23,opt,name=workspace,proto3,oneof"`
}

type BuildEventId_BuildMetadata struct {
	BuildMetadata *BuildEventId_BuildMetadataId `protobuf:"bytes,24,opt,name=build_metadata,json=buildMetadata,proto3,oneof"`
}

type BuildEventId_ConvenienceSymlinksIdentified struct {
	ConvenienceSymlinksIdentified *BuildEventId_ConvenienceSymlinksIdentifiedId `protobuf:"bytes,25,opt,name=convenience_symlinks_identified,json=convenienceSymlinksIdentified,proto3,oneof"`
}

func (*BuildEventId_Unknown) isBuildEventId_Id() {}

func (*BuildEventId_Progress) isBuildEventId_Id() {}

func (*BuildEventId_Started) isBuildEventId_Id() {}

func (*BuildEventId_UnstructuredCommandLine) isBuildEventId_Id() {}

func (*BuildEventId_StructuredCommandLine) isBuildEventId_Id() {}

func (*BuildEventId_WorkspaceStatus) isBuildEventId_Id() {}

func (*BuildEventId_OptionsParsed) isBuildEventId_Id() {}

func (*BuildEventId_Fetch) isBuildEventId_Id() {}

func (*BuildEventId_Configuration) isBuildEventId_Id() {}

func (*BuildEventId_TargetConfigured) isBuildEventId_Id() {}

func (*BuildEventId_Pattern) isBuildEventId_Id() {}

func (*BuildEventId_PatternSkipped) isBuildEventId_Id() {}

func (*BuildEventId_NamedSet) isBuildEventId_Id() {}

func (*BuildEventId_TargetCompleted) isBuildEventId_Id() {}

func (*BuildEventId_ActionCompleted) isBuildEventId_Id() {}

func (*BuildEventId_UnconfiguredLabel) isBuildEventId_Id() {}

func (*BuildEventId_ConfiguredLabel) isBuildEventId_Id() {}

func (*BuildEventId_TestResult) isBuildEventId_Id() {}

func (*BuildEventId_TestSummary) isBuildEventId_Id() {}

func (*BuildEventId_TargetSummary) isBuildEventId_Id() {}

func (*BuildEventId_BuildFinished) isBuildEventId_Id() {}

func (*BuildEventId_BuildToolLogs) isBuildEventId_Id() {}

func (*BuildEventId_BuildMetrics) isBuildEventId_Id() {}

func (*BuildEventId_Workspace) isBuildEventId_Id() {}

func (*BuildEventId_BuildMetadata) isBuildEventId_Id() {}

func (*BuildEventId_ConvenienceSymlinksIdentified) isBuildEventId_Id() {}

// Payload of an event summarizing the progress of the build so far. Those
// events are also used to be parents of events where the more logical parent
// event cannot be posted yet as the needed information is not yet complete.
type Progress struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The next chunk of stdout that bazel produced since the last progress event
	// or the beginning of the build.
	Stdout string `protobuf:"bytes,1,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// The next chunk of stderr that bazel produced since the last progress event
	// or the beginning of the build.
	Stderr string `protobuf:"bytes,2,opt,name=stderr,proto3" json:"stderr,omitempty"`
}

func (x *Progress) Reset() {
	*x = Progress{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Progress) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Progress) ProtoMessage() {}

func (x *Progress) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Progress.ProtoReflect.Descriptor instead.
func (*Progress) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{1}
}

func (x *Progress) GetStdout() string {
	if x != nil {
		return x.Stdout
	}
	return ""
}

func (x *Progress) GetStderr() string {
	if x != nil {
		return x.Stderr
	}
	return ""
}

// Payload of an event indicating that an expected event will not come, as
// the build is aborted prematurely for some reason.
type Aborted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Reason Aborted_AbortReason `protobuf:"varint,1,opt,name=reason,proto3,enum=build_event_stream.Aborted_AbortReason" json:"reason,omitempty"`
	// A human readable description with more details about there reason, where
	// available and useful.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *Aborted) Reset() {
	*x = Aborted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Aborted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Aborted) ProtoMessage() {}

func (x *Aborted) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Aborted.ProtoReflect.Descriptor instead.
func (*Aborted) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{2}
}

func (x *Aborted) GetReason() Aborted_AbortReason {
	if x != nil {
		return x.Reason
	}
	return Aborted_UNKNOWN
}

func (x *Aborted) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Payload of an event indicating the beginning of a new build. Usually, events
// of those type start a new build-event stream. The target pattern requested
// to be build is contained in one of the announced child events; it is an
// invariant that precisely one of the announced child events has a non-empty
// target pattern.
type BuildStarted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Uuid string `protobuf:"bytes,1,opt,name=uuid,proto3" json:"uuid,omitempty"`
	// Start of the build in ms since the epoch.
	//
	// Deprecated, use `start_time` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	StartTimeMillis int64 `protobuf:"varint,2,opt,name=start_time_millis,json=startTimeMillis,proto3" json:"start_time_millis,omitempty"`
	// Start of the build.
	StartTime *timestamppb.Timestamp `protobuf:"bytes,9,opt,name=start_time,json=startTime,proto3" json:"start_time,omitempty"`
	// Version of the build tool that is running.
	BuildToolVersion string `protobuf:"bytes,3,opt,name=build_tool_version,json=buildToolVersion,proto3" json:"build_tool_version,omitempty"`
	// A human-readable description of all the non-default option settings
	OptionsDescription string `protobuf:"bytes,4,opt,name=options_description,json=optionsDescription,proto3" json:"options_description,omitempty"`
	// The name of the command that the user invoked.
	Command string `protobuf:"bytes,5,opt,name=command,proto3" json:"command,omitempty"`
	// The working directory from which the build tool was invoked.
	WorkingDirectory string `protobuf:"bytes,6,opt,name=working_directory,json=workingDirectory,proto3" json:"working_directory,omitempty"`
	// The directory of the workspace.
	WorkspaceDirectory string `protobuf:"bytes,7,opt,name=workspace_directory,json=workspaceDirectory,proto3" json:"workspace_directory,omitempty"`
	// The process ID of the Bazel server.
	ServerPid int64 `protobuf:"varint,8,opt,name=server_pid,json=serverPid,proto3" json:"server_pid,omitempty"`
}

func (x *BuildStarted) Reset() {
	*x = BuildStarted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildStarted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildStarted) ProtoMessage() {}

func (x *BuildStarted) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildStarted.ProtoReflect.Descriptor instead.
func (*BuildStarted) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{3}
}

func (x *BuildStarted) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

// Deprecated: Do not use.
func (x *BuildStarted) GetStartTimeMillis() int64 {
	if x != nil {
		return x.StartTimeMillis
	}
	return 0
}

func (x *BuildStarted) GetStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.StartTime
	}
	return nil
}

func (x *BuildStarted) GetBuildToolVersion() string {
	if x != nil {
		return x.BuildToolVersion
	}
	return ""
}

func (x *BuildStarted) GetOptionsDescription() string {
	if x != nil {
		return x.OptionsDescription
	}
	return ""
}

func (x *BuildStarted) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *BuildStarted) GetWorkingDirectory() string {
	if x != nil {
		return x.WorkingDirectory
	}
	return ""
}

func (x *BuildStarted) GetWorkspaceDirectory() string {
	if x != nil {
		return x.WorkspaceDirectory
	}
	return ""
}

func (x *BuildStarted) GetServerPid() int64 {
	if x != nil {
		return x.ServerPid
	}
	return 0
}

// Configuration related to the blaze workspace and output tree.
type WorkspaceConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The root of the local blaze exec root. All output files live underneath
	// this at "blaze-out/".
	LocalExecRoot string `protobuf:"bytes,1,opt,name=local_exec_root,json=localExecRoot,proto3" json:"local_exec_root,omitempty"`
}

func (x *WorkspaceConfig) Reset() {
	*x = WorkspaceConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceConfig) ProtoMessage() {}

func (x *WorkspaceConfig) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceConfig.ProtoReflect.Descriptor instead.
func (*WorkspaceConfig) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{4}
}

func (x *WorkspaceConfig) GetLocalExecRoot() string {
	if x != nil {
		return x.LocalExecRoot
	}
	return ""
}

// Payload of an event reporting the command-line of the invocation as
// originally received by the server. Note that this is not the command-line
// given by the user, as the client adds information about the invocation,
// like name and relevant entries of rc-files and client environment variables.
// However, it does contain enough information to reproduce the build
// invocation.
type UnstructuredCommandLine struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Args []string `protobuf:"bytes,1,rep,name=args,proto3" json:"args,omitempty"`
}

func (x *UnstructuredCommandLine) Reset() {
	*x = UnstructuredCommandLine{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UnstructuredCommandLine) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UnstructuredCommandLine) ProtoMessage() {}

func (x *UnstructuredCommandLine) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UnstructuredCommandLine.ProtoReflect.Descriptor instead.
func (*UnstructuredCommandLine) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{5}
}

func (x *UnstructuredCommandLine) GetArgs() []string {
	if x != nil {
		return x.Args
	}
	return nil
}

// Payload of an event reporting on the parsed options, grouped in various ways.
type OptionsParsed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartupOptions         []string                    `protobuf:"bytes,1,rep,name=startup_options,json=startupOptions,proto3" json:"startup_options,omitempty"`
	ExplicitStartupOptions []string                    `protobuf:"bytes,2,rep,name=explicit_startup_options,json=explicitStartupOptions,proto3" json:"explicit_startup_options,omitempty"`
	CmdLine                []string                    `protobuf:"bytes,3,rep,name=cmd_line,json=cmdLine,proto3" json:"cmd_line,omitempty"`
	ExplicitCmdLine        []string                    `protobuf:"bytes,4,rep,name=explicit_cmd_line,json=explicitCmdLine,proto3" json:"explicit_cmd_line,omitempty"`
	InvocationPolicy       *bep_proto.InvocationPolicy `protobuf:"bytes,5,opt,name=invocation_policy,json=invocationPolicy,proto3" json:"invocation_policy,omitempty"`
	ToolTag                string                      `protobuf:"bytes,6,opt,name=tool_tag,json=toolTag,proto3" json:"tool_tag,omitempty"`
}

func (x *OptionsParsed) Reset() {
	*x = OptionsParsed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OptionsParsed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OptionsParsed) ProtoMessage() {}

func (x *OptionsParsed) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OptionsParsed.ProtoReflect.Descriptor instead.
func (*OptionsParsed) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{6}
}

func (x *OptionsParsed) GetStartupOptions() []string {
	if x != nil {
		return x.StartupOptions
	}
	return nil
}

func (x *OptionsParsed) GetExplicitStartupOptions() []string {
	if x != nil {
		return x.ExplicitStartupOptions
	}
	return nil
}

func (x *OptionsParsed) GetCmdLine() []string {
	if x != nil {
		return x.CmdLine
	}
	return nil
}

func (x *OptionsParsed) GetExplicitCmdLine() []string {
	if x != nil {
		return x.ExplicitCmdLine
	}
	return nil
}

func (x *OptionsParsed) GetInvocationPolicy() *bep_proto.InvocationPolicy {
	if x != nil {
		return x.InvocationPolicy
	}
	return nil
}

func (x *OptionsParsed) GetToolTag() string {
	if x != nil {
		return x.ToolTag
	}
	return ""
}

// Payload of an event indicating that an external resource was fetched. This
// event will only occur in streams where an actual fetch happened, not in ones
// where a cached copy of the entity to be fetched was used.
type Fetch struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
}

func (x *Fetch) Reset() {
	*x = Fetch{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Fetch) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Fetch) ProtoMessage() {}

func (x *Fetch) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Fetch.ProtoReflect.Descriptor instead.
func (*Fetch) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{7}
}

func (x *Fetch) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Payload of an event reporting the workspace status. Key-value pairs can be
// provided by specifying the workspace_status_command to an executable that
// returns one key-value pair per line of output (key and value separated by a
// space).
type WorkspaceStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Item []*WorkspaceStatus_Item `protobuf:"bytes,1,rep,name=item,proto3" json:"item,omitempty"`
}

func (x *WorkspaceStatus) Reset() {
	*x = WorkspaceStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceStatus) ProtoMessage() {}

func (x *WorkspaceStatus) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceStatus.ProtoReflect.Descriptor instead.
func (*WorkspaceStatus) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{8}
}

func (x *WorkspaceStatus) GetItem() []*WorkspaceStatus_Item {
	if x != nil {
		return x.Item
	}
	return nil
}

// Payload of an event reporting custom key-value metadata associated with the
// build.
type BuildMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Custom metadata for the build.
	Metadata map[string]string `protobuf:"bytes,1,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BuildMetadata) Reset() {
	*x = BuildMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetadata) ProtoMessage() {}

func (x *BuildMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetadata.ProtoReflect.Descriptor instead.
func (*BuildMetadata) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{9}
}

func (x *BuildMetadata) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Payload of an event reporting details of a given configuration.
type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mnemonic     string            `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	PlatformName string            `protobuf:"bytes,2,opt,name=platform_name,json=platformName,proto3" json:"platform_name,omitempty"`
	Cpu          string            `protobuf:"bytes,3,opt,name=cpu,proto3" json:"cpu,omitempty"`
	MakeVariable map[string]string `protobuf:"bytes,4,rep,name=make_variable,json=makeVariable,proto3" json:"make_variable,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{10}
}

func (x *Configuration) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *Configuration) GetPlatformName() string {
	if x != nil {
		return x.PlatformName
	}
	return ""
}

func (x *Configuration) GetCpu() string {
	if x != nil {
		return x.Cpu
	}
	return ""
}

func (x *Configuration) GetMakeVariable() map[string]string {
	if x != nil {
		return x.MakeVariable
	}
	return nil
}

// Payload of the event indicating the expansion of a target pattern.
// The main information is in the chaining part: the id will contain the
// target pattern that was expanded and the children id will contain the
// target or target pattern it was expanded to.
type PatternExpanded struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// All test suites requested via top-level target patterns. Does not include
	// test suites whose label matched a negative pattern.
	TestSuiteExpansions []*PatternExpanded_TestSuiteExpansion `protobuf:"bytes,1,rep,name=test_suite_expansions,json=testSuiteExpansions,proto3" json:"test_suite_expansions,omitempty"`
}

func (x *PatternExpanded) Reset() {
	*x = PatternExpanded{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternExpanded) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternExpanded) ProtoMessage() {}

func (x *PatternExpanded) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternExpanded.ProtoReflect.Descriptor instead.
func (*PatternExpanded) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{11}
}

func (x *PatternExpanded) GetTestSuiteExpansions() []*PatternExpanded_TestSuiteExpansion {
	if x != nil {
		return x.TestSuiteExpansions
	}
	return nil
}

// Payload of the event indicating that the configurations for a target have
// been identified. As with pattern expansion the main information is in the
// chaining part: the id will contain the target that was configured and the
// children id will contain the configured targets it was configured to.
type TargetConfigured struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The kind of target (e.g.,  e.g. "cc_library rule", "source file",
	// "generated file") where the completion is reported.
	TargetKind string `protobuf:"bytes,1,opt,name=target_kind,json=targetKind,proto3" json:"target_kind,omitempty"`
	// The size of the test, if the target is a test target. Unset otherwise.
	TestSize TestSize `protobuf:"varint,2,opt,name=test_size,json=testSize,proto3,enum=build_event_stream.TestSize" json:"test_size,omitempty"`
	// List of all tags associated with this target (for all possible
	// configurations).
	Tag []string `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
}

func (x *TargetConfigured) Reset() {
	*x = TargetConfigured{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetConfigured) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetConfigured) ProtoMessage() {}

func (x *TargetConfigured) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetConfigured.ProtoReflect.Descriptor instead.
func (*TargetConfigured) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{12}
}

func (x *TargetConfigured) GetTargetKind() string {
	if x != nil {
		return x.TargetKind
	}
	return ""
}

func (x *TargetConfigured) GetTestSize() TestSize {
	if x != nil {
		return x.TestSize
	}
	return TestSize_UNKNOWN
}

func (x *TargetConfigured) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

type File struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A sequence of prefixes to apply to the file name to construct a full path.
	// In most but not all cases, there will be 3 entries:
	//  1. A root output directory, eg "bazel-out"
	//  2. A configuration mnemonic, eg "k8-fastbuild"
	//  3. An output category, eg "genfiles"
	PathPrefix []string `protobuf:"bytes,4,rep,name=path_prefix,json=pathPrefix,proto3" json:"path_prefix,omitempty"`
	// identifier indicating the nature of the file (e.g., "stdout", "stderr")
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to File:
	//	*File_Uri
	//	*File_Contents
	File isFile_File `protobuf_oneof:"file"`
	// Digest of the file, using the build tool's configured digest algorithm,
	// hex-encoded.
	Digest string `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
	// Length of the file in bytes.
	Length int64 `protobuf:"varint,6,opt,name=length,proto3" json:"length,omitempty"`
}

func (x *File) Reset() {
	*x = File{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *File) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*File) ProtoMessage() {}

func (x *File) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use File.ProtoReflect.Descriptor instead.
func (*File) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{13}
}

func (x *File) GetPathPrefix() []string {
	if x != nil {
		return x.PathPrefix
	}
	return nil
}

func (x *File) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *File) GetFile() isFile_File {
	if m != nil {
		return m.File
	}
	return nil
}

func (x *File) GetUri() string {
	if x, ok := x.GetFile().(*File_Uri); ok {
		return x.Uri
	}
	return ""
}

func (x *File) GetContents() []byte {
	if x, ok := x.GetFile().(*File_Contents); ok {
		return x.Contents
	}
	return nil
}

func (x *File) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

func (x *File) GetLength() int64 {
	if x != nil {
		return x.Length
	}
	return 0
}

type isFile_File interface {
	isFile_File()
}

type File_Uri struct {
	// A location where the contents of the file can be found. The string is
	// encoded according to RFC2396.
	Uri string `protobuf:"bytes,2,opt,name=uri,proto3,oneof"`
}

type File_Contents struct {
	// The contents of the file, if they are guaranteed to be short.
	Contents []byte `protobuf:"bytes,3,opt,name=contents,proto3,oneof"`
}

func (*File_Uri) isFile_File() {}

func (*File_Contents) isFile_File() {}

// Payload of a message to describe a set of files, usually build artifacts, to
// be referred to later by their name. In this way, files that occur identically
// as outputs of several targets have to be named only once.
type NamedSetOfFiles struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Files that belong to this named set of files.
	Files []*File `protobuf:"bytes,1,rep,name=files,proto3" json:"files,omitempty"`
	// Other named sets whose members also belong to this set.
	FileSets []*BuildEventId_NamedSetOfFilesId `protobuf:"bytes,2,rep,name=file_sets,json=fileSets,proto3" json:"file_sets,omitempty"`
}

func (x *NamedSetOfFiles) Reset() {
	*x = NamedSetOfFiles{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamedSetOfFiles) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamedSetOfFiles) ProtoMessage() {}

func (x *NamedSetOfFiles) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamedSetOfFiles.ProtoReflect.Descriptor instead.
func (*NamedSetOfFiles) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{14}
}

func (x *NamedSetOfFiles) GetFiles() []*File {
	if x != nil {
		return x.Files
	}
	return nil
}

func (x *NamedSetOfFiles) GetFileSets() []*BuildEventId_NamedSetOfFilesId {
	if x != nil {
		return x.FileSets
	}
	return nil
}

// Payload of the event indicating the completion of an action. The main purpose
// of posting those events is to provide details on the root cause for a target
// failing; however, consumers of the build-event protocol must not assume
// that only failed actions are posted.
type ActionExecuted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The mnemonic of the action that was executed
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	// The exit code of the action, if it is available.
	ExitCode int32 `protobuf:"varint,2,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// Location where to find the standard output of the action
	// (e.g., a file path).
	Stdout *File `protobuf:"bytes,3,opt,name=stdout,proto3" json:"stdout,omitempty"`
	// Location where to find the standard error of the action
	// (e.g., a file path).
	Stderr *File `protobuf:"bytes,4,opt,name=stderr,proto3" json:"stderr,omitempty"`
	// Deprecated. This field is now present on ActionCompletedId.
	//
	// Deprecated: Do not use.
	Label string `protobuf:"bytes,5,opt,name=label,proto3" json:"label,omitempty"`
	// Deprecated. This field is now present on ActionCompletedId.
	//
	// Deprecated: Do not use.
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,7,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// Primary output; only provided for successful actions.
	PrimaryOutput *File `protobuf:"bytes,6,opt,name=primary_output,json=primaryOutput,proto3" json:"primary_output,omitempty"`
	// The command-line of the action, if the action is a command.
	CommandLine []string `protobuf:"bytes,9,rep,name=command_line,json=commandLine,proto3" json:"command_line,omitempty"`
	// List of paths to log files
	ActionMetadataLogs []*File `protobuf:"bytes,10,rep,name=action_metadata_logs,json=actionMetadataLogs,proto3" json:"action_metadata_logs,omitempty"`
	// Only populated if success = false, and sometimes not even then.
	FailureDetail *bep_proto.FailureDetail `protobuf:"bytes,11,opt,name=failure_detail,json=failureDetail,proto3" json:"failure_detail,omitempty"`
}

func (x *ActionExecuted) Reset() {
	*x = ActionExecuted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ActionExecuted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ActionExecuted) ProtoMessage() {}

func (x *ActionExecuted) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ActionExecuted.ProtoReflect.Descriptor instead.
func (*ActionExecuted) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{15}
}

func (x *ActionExecuted) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ActionExecuted) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ActionExecuted) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *ActionExecuted) GetStdout() *File {
	if x != nil {
		return x.Stdout
	}
	return nil
}

func (x *ActionExecuted) GetStderr() *File {
	if x != nil {
		return x.Stderr
	}
	return nil
}

// Deprecated: Do not use.
func (x *ActionExecuted) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// Deprecated: Do not use.
func (x *ActionExecuted) GetConfiguration() *BuildEventId_ConfigurationId {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *ActionExecuted) GetPrimaryOutput() *File {
	if x != nil {
		return x.PrimaryOutput
	}
	return nil
}

func (x *ActionExecuted) GetCommandLine() []string {
	if x != nil {
		return x.CommandLine
	}
	return nil
}

func (x *ActionExecuted) GetActionMetadataLogs() []*File {
	if x != nil {
		return x.ActionMetadataLogs
	}
	return nil
}

func (x *ActionExecuted) GetFailureDetail() *bep_proto.FailureDetail {
	if x != nil {
		return x.FailureDetail
	}
	return nil
}

// Collection of all output files belonging to that output group.
type OutputGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the output group
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// List of file sets that belong to this output group as well.
	FileSets []*BuildEventId_NamedSetOfFilesId `protobuf:"bytes,3,rep,name=file_sets,json=fileSets,proto3" json:"file_sets,omitempty"`
	// Indicates that one or more of the output group's files were not built
	// successfully (the generating action failed).
	Incomplete bool `protobuf:"varint,4,opt,name=incomplete,proto3" json:"incomplete,omitempty"`
}

func (x *OutputGroup) Reset() {
	*x = OutputGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutputGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutputGroup) ProtoMessage() {}

func (x *OutputGroup) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutputGroup.ProtoReflect.Descriptor instead.
func (*OutputGroup) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{16}
}

func (x *OutputGroup) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *OutputGroup) GetFileSets() []*BuildEventId_NamedSetOfFilesId {
	if x != nil {
		return x.FileSets
	}
	return nil
}

func (x *OutputGroup) GetIncomplete() bool {
	if x != nil {
		return x.Incomplete
	}
	return false
}

// Payload of the event indicating the completion of a target. The target is
// specified in the id. If the target failed the root causes are provided as
// children events.
type TargetComplete struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// The kind of target (e.g.,  e.g. "cc_library rule", "source file",
	// "generated file") where the completion is reported.
	// Deprecated: use the target_kind field in TargetConfigured instead.
	//
	// Deprecated: Do not use.
	TargetKind string `protobuf:"bytes,5,opt,name=target_kind,json=targetKind,proto3" json:"target_kind,omitempty"`
	// The size of the test, if the target is a test target. Unset otherwise.
	// Deprecated: use the test_size field in TargetConfigured instead.
	//
	// Deprecated: Do not use.
	TestSize TestSize `protobuf:"varint,6,opt,name=test_size,json=testSize,proto3,enum=build_event_stream.TestSize" json:"test_size,omitempty"`
	// The output files are arranged by their output group. If an output file
	// is part of multiple output groups, it appears once in each output
	// group.
	OutputGroup []*OutputGroup `protobuf:"bytes,2,rep,name=output_group,json=outputGroup,proto3" json:"output_group,omitempty"`
	// Temporarily, also report the important outputs directly. This is only to
	// allow existing clients help transition to the deduplicated representation;
	// new clients should not use it.
	//
	// Deprecated: Do not use.
	ImportantOutput []*File `protobuf:"bytes,4,rep,name=important_output,json=importantOutput,proto3" json:"important_output,omitempty"`
	// Report output artifacts (referenced transitively via output_group) which
	// emit directories instead of singleton files. These directory_output entries
	// will never include a uri.
	DirectoryOutput []*File `protobuf:"bytes,8,rep,name=directory_output,json=directoryOutput,proto3" json:"directory_output,omitempty"`
	// List of tags associated with this configured target.
	Tag []string `protobuf:"bytes,3,rep,name=tag,proto3" json:"tag,omitempty"`
	// The timeout specified for test actions under this configured target.
	//
	// Deprecated, use `test_timeout` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	TestTimeoutSeconds int64 `protobuf:"varint,7,opt,name=test_timeout_seconds,json=testTimeoutSeconds,proto3" json:"test_timeout_seconds,omitempty"`
	// The timeout specified for test actions under this configured target.
	TestTimeout *durationpb.Duration `protobuf:"bytes,10,opt,name=test_timeout,json=testTimeout,proto3" json:"test_timeout,omitempty"`
	// Failure information about the target, only populated if success is false,
	// and sometimes not even then. Equal to one of the ActionExecuted
	// failure_detail fields for one of the root cause ActionExecuted events.
	FailureDetail *bep_proto.FailureDetail `protobuf:"bytes,9,opt,name=failure_detail,json=failureDetail,proto3" json:"failure_detail,omitempty"`
}

func (x *TargetComplete) Reset() {
	*x = TargetComplete{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetComplete) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetComplete) ProtoMessage() {}

func (x *TargetComplete) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetComplete.ProtoReflect.Descriptor instead.
func (*TargetComplete) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{17}
}

func (x *TargetComplete) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

// Deprecated: Do not use.
func (x *TargetComplete) GetTargetKind() string {
	if x != nil {
		return x.TargetKind
	}
	return ""
}

// Deprecated: Do not use.
func (x *TargetComplete) GetTestSize() TestSize {
	if x != nil {
		return x.TestSize
	}
	return TestSize_UNKNOWN
}

func (x *TargetComplete) GetOutputGroup() []*OutputGroup {
	if x != nil {
		return x.OutputGroup
	}
	return nil
}

// Deprecated: Do not use.
func (x *TargetComplete) GetImportantOutput() []*File {
	if x != nil {
		return x.ImportantOutput
	}
	return nil
}

func (x *TargetComplete) GetDirectoryOutput() []*File {
	if x != nil {
		return x.DirectoryOutput
	}
	return nil
}

func (x *TargetComplete) GetTag() []string {
	if x != nil {
		return x.Tag
	}
	return nil
}

// Deprecated: Do not use.
func (x *TargetComplete) GetTestTimeoutSeconds() int64 {
	if x != nil {
		return x.TestTimeoutSeconds
	}
	return 0
}

func (x *TargetComplete) GetTestTimeout() *durationpb.Duration {
	if x != nil {
		return x.TestTimeout
	}
	return nil
}

func (x *TargetComplete) GetFailureDetail() *bep_proto.FailureDetail {
	if x != nil {
		return x.FailureDetail
	}
	return nil
}

// Payload on events reporting about individual test action.
type TestResult struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The status of this test.
	Status TestStatus `protobuf:"varint,5,opt,name=status,proto3,enum=build_event_stream.TestStatus" json:"status,omitempty"`
	// Additional details about the status of the test. This is intended for
	// user display and must not be parsed.
	StatusDetails string `protobuf:"bytes,9,opt,name=status_details,json=statusDetails,proto3" json:"status_details,omitempty"`
	// True, if the reported attempt is taken from the tool's local cache.
	CachedLocally bool `protobuf:"varint,4,opt,name=cached_locally,json=cachedLocally,proto3" json:"cached_locally,omitempty"`
	// Time in milliseconds since the epoch at which the test attempt was started.
	// Note: for cached test results, this is time can be before the start of the
	// build.
	//
	// Deprecated, use `test_attempt_start` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	TestAttemptStartMillisEpoch int64 `protobuf:"varint,6,opt,name=test_attempt_start_millis_epoch,json=testAttemptStartMillisEpoch,proto3" json:"test_attempt_start_millis_epoch,omitempty"`
	// Time at which the test attempt was started.
	// Note: for cached test results, this is time can be before the start of the
	// build.
	TestAttemptStart *timestamppb.Timestamp `protobuf:"bytes,10,opt,name=test_attempt_start,json=testAttemptStart,proto3" json:"test_attempt_start,omitempty"`
	// Time the test took to run. For locally cached results, this is the time
	// the cached invocation took when it was invoked.
	//
	// Deprecated, use `test_attempt_duration` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	TestAttemptDurationMillis int64 `protobuf:"varint,3,opt,name=test_attempt_duration_millis,json=testAttemptDurationMillis,proto3" json:"test_attempt_duration_millis,omitempty"`
	// Time the test took to run. For locally cached results, this is the time
	// the cached invocation took when it was invoked.
	TestAttemptDuration *durationpb.Duration `protobuf:"bytes,11,opt,name=test_attempt_duration,json=testAttemptDuration,proto3" json:"test_attempt_duration,omitempty"`
	// Files (logs, test.xml, undeclared outputs, etc) generated by that test
	// action.
	TestActionOutput []*File `protobuf:"bytes,2,rep,name=test_action_output,json=testActionOutput,proto3" json:"test_action_output,omitempty"`
	// Warnings generated by that test action.
	Warning       []string                  `protobuf:"bytes,7,rep,name=warning,proto3" json:"warning,omitempty"`
	ExecutionInfo *TestResult_ExecutionInfo `protobuf:"bytes,8,opt,name=execution_info,json=executionInfo,proto3" json:"execution_info,omitempty"`
}

func (x *TestResult) Reset() {
	*x = TestResult{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult) ProtoMessage() {}

func (x *TestResult) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult.ProtoReflect.Descriptor instead.
func (*TestResult) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{18}
}

func (x *TestResult) GetStatus() TestStatus {
	if x != nil {
		return x.Status
	}
	return TestStatus_NO_STATUS
}

func (x *TestResult) GetStatusDetails() string {
	if x != nil {
		return x.StatusDetails
	}
	return ""
}

func (x *TestResult) GetCachedLocally() bool {
	if x != nil {
		return x.CachedLocally
	}
	return false
}

// Deprecated: Do not use.
func (x *TestResult) GetTestAttemptStartMillisEpoch() int64 {
	if x != nil {
		return x.TestAttemptStartMillisEpoch
	}
	return 0
}

func (x *TestResult) GetTestAttemptStart() *timestamppb.Timestamp {
	if x != nil {
		return x.TestAttemptStart
	}
	return nil
}

// Deprecated: Do not use.
func (x *TestResult) GetTestAttemptDurationMillis() int64 {
	if x != nil {
		return x.TestAttemptDurationMillis
	}
	return 0
}

func (x *TestResult) GetTestAttemptDuration() *durationpb.Duration {
	if x != nil {
		return x.TestAttemptDuration
	}
	return nil
}

func (x *TestResult) GetTestActionOutput() []*File {
	if x != nil {
		return x.TestActionOutput
	}
	return nil
}

func (x *TestResult) GetWarning() []string {
	if x != nil {
		return x.Warning
	}
	return nil
}

func (x *TestResult) GetExecutionInfo() *TestResult_ExecutionInfo {
	if x != nil {
		return x.ExecutionInfo
	}
	return nil
}

// Payload of the event summarizing a test.
type TestSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Wrapper around BlazeTestStatus to support importing that enum to proto3.
	// Overall status of test, accumulated over all runs, shards, and attempts.
	OverallStatus TestStatus `protobuf:"varint,5,opt,name=overall_status,json=overallStatus,proto3,enum=build_event_stream.TestStatus" json:"overall_status,omitempty"`
	// Total number of shard attempts.
	// E.g., if a target has 4 runs, 3 shards, each with 2 attempts,
	// then total_run_count will be 4*3*2 = 24.
	TotalRunCount int32 `protobuf:"varint,1,opt,name=total_run_count,json=totalRunCount,proto3" json:"total_run_count,omitempty"`
	// Value of runs_per_test for the test.
	RunCount int32 `protobuf:"varint,10,opt,name=run_count,json=runCount,proto3" json:"run_count,omitempty"`
	// Number of attempts.
	// If there are a different number of attempts per shard, the highest attempt
	// count across all shards for each run is used.
	AttemptCount int32 `protobuf:"varint,15,opt,name=attempt_count,json=attemptCount,proto3" json:"attempt_count,omitempty"`
	// Number of shards.
	ShardCount int32 `protobuf:"varint,11,opt,name=shard_count,json=shardCount,proto3" json:"shard_count,omitempty"`
	// Path to logs of passed runs.
	Passed []*File `protobuf:"bytes,3,rep,name=passed,proto3" json:"passed,omitempty"`
	// Path to logs of failed runs;
	Failed []*File `protobuf:"bytes,4,rep,name=failed,proto3" json:"failed,omitempty"`
	// Total number of cached test actions
	TotalNumCached int32 `protobuf:"varint,6,opt,name=total_num_cached,json=totalNumCached,proto3" json:"total_num_cached,omitempty"`
	// When the test first started running.
	//
	// Deprecated, use `first_start_time` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	FirstStartTimeMillis int64 `protobuf:"varint,7,opt,name=first_start_time_millis,json=firstStartTimeMillis,proto3" json:"first_start_time_millis,omitempty"`
	// When the test first started running.
	FirstStartTime *timestamppb.Timestamp `protobuf:"bytes,13,opt,name=first_start_time,json=firstStartTime,proto3" json:"first_start_time,omitempty"`
	// When the last test action completed.
	//
	// Deprecated, use `last_stop_time` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	LastStopTimeMillis int64 `protobuf:"varint,8,opt,name=last_stop_time_millis,json=lastStopTimeMillis,proto3" json:"last_stop_time_millis,omitempty"`
	// When the test first started running.
	LastStopTime *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=last_stop_time,json=lastStopTime,proto3" json:"last_stop_time,omitempty"`
	// The total runtime of the test.
	//
	// Deprecated, use `total_run` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	TotalRunDurationMillis int64 `protobuf:"varint,9,opt,name=total_run_duration_millis,json=totalRunDurationMillis,proto3" json:"total_run_duration_millis,omitempty"`
	// The total runtime of the test.
	TotalRunDuration *durationpb.Duration `protobuf:"bytes,12,opt,name=total_run_duration,json=totalRunDuration,proto3" json:"total_run_duration,omitempty"`
}

func (x *TestSummary) Reset() {
	*x = TestSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestSummary) ProtoMessage() {}

func (x *TestSummary) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestSummary.ProtoReflect.Descriptor instead.
func (*TestSummary) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{19}
}

func (x *TestSummary) GetOverallStatus() TestStatus {
	if x != nil {
		return x.OverallStatus
	}
	return TestStatus_NO_STATUS
}

func (x *TestSummary) GetTotalRunCount() int32 {
	if x != nil {
		return x.TotalRunCount
	}
	return 0
}

func (x *TestSummary) GetRunCount() int32 {
	if x != nil {
		return x.RunCount
	}
	return 0
}

func (x *TestSummary) GetAttemptCount() int32 {
	if x != nil {
		return x.AttemptCount
	}
	return 0
}

func (x *TestSummary) GetShardCount() int32 {
	if x != nil {
		return x.ShardCount
	}
	return 0
}

func (x *TestSummary) GetPassed() []*File {
	if x != nil {
		return x.Passed
	}
	return nil
}

func (x *TestSummary) GetFailed() []*File {
	if x != nil {
		return x.Failed
	}
	return nil
}

func (x *TestSummary) GetTotalNumCached() int32 {
	if x != nil {
		return x.TotalNumCached
	}
	return 0
}

// Deprecated: Do not use.
func (x *TestSummary) GetFirstStartTimeMillis() int64 {
	if x != nil {
		return x.FirstStartTimeMillis
	}
	return 0
}

func (x *TestSummary) GetFirstStartTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FirstStartTime
	}
	return nil
}

// Deprecated: Do not use.
func (x *TestSummary) GetLastStopTimeMillis() int64 {
	if x != nil {
		return x.LastStopTimeMillis
	}
	return 0
}

func (x *TestSummary) GetLastStopTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStopTime
	}
	return nil
}

// Deprecated: Do not use.
func (x *TestSummary) GetTotalRunDurationMillis() int64 {
	if x != nil {
		return x.TotalRunDurationMillis
	}
	return 0
}

func (x *TestSummary) GetTotalRunDuration() *durationpb.Duration {
	if x != nil {
		return x.TotalRunDuration
	}
	return nil
}

// Payload of the event summarizing a target (test or non-test).
type TargetSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Conjunction of TargetComplete events for this target, including aspects.
	OverallBuildSuccess bool `protobuf:"varint,1,opt,name=overall_build_success,json=overallBuildSuccess,proto3" json:"overall_build_success,omitempty"`
	// Repeats TestSummary's overall_status if available.
	OverallTestStatus TestStatus `protobuf:"varint,2,opt,name=overall_test_status,json=overallTestStatus,proto3,enum=build_event_stream.TestStatus" json:"overall_test_status,omitempty"`
}

func (x *TargetSummary) Reset() {
	*x = TargetSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TargetSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TargetSummary) ProtoMessage() {}

func (x *TargetSummary) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TargetSummary.ProtoReflect.Descriptor instead.
func (*TargetSummary) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{20}
}

func (x *TargetSummary) GetOverallBuildSuccess() bool {
	if x != nil {
		return x.OverallBuildSuccess
	}
	return false
}

func (x *TargetSummary) GetOverallTestStatus() TestStatus {
	if x != nil {
		return x.OverallTestStatus
	}
	return TestStatus_NO_STATUS
}

// Event indicating the end of a build.
type BuildFinished struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// If the build succeeded or failed.
	//
	// Deprecated: Do not use.
	OverallSuccess bool `protobuf:"varint,1,opt,name=overall_success,json=overallSuccess,proto3" json:"overall_success,omitempty"`
	// The overall status of the build. A build was successful iff
	// ExitCode.code equals 0.
	ExitCode *BuildFinished_ExitCode `protobuf:"bytes,3,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// End of the build in ms since the epoch.
	//
	// Deprecated, use `finish_time` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	FinishTimeMillis int64 `protobuf:"varint,2,opt,name=finish_time_millis,json=finishTimeMillis,proto3" json:"finish_time_millis,omitempty"`
	// End of the build.
	FinishTime *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=finish_time,json=finishTime,proto3" json:"finish_time,omitempty"`
	// Deprecated: Do not use.
	AnomalyReport *BuildFinished_AnomalyReport `protobuf:"bytes,4,opt,name=anomaly_report,json=anomalyReport,proto3" json:"anomaly_report,omitempty"`
}

func (x *BuildFinished) Reset() {
	*x = BuildFinished{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildFinished) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildFinished) ProtoMessage() {}

func (x *BuildFinished) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildFinished.ProtoReflect.Descriptor instead.
func (*BuildFinished) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{21}
}

// Deprecated: Do not use.
func (x *BuildFinished) GetOverallSuccess() bool {
	if x != nil {
		return x.OverallSuccess
	}
	return false
}

func (x *BuildFinished) GetExitCode() *BuildFinished_ExitCode {
	if x != nil {
		return x.ExitCode
	}
	return nil
}

// Deprecated: Do not use.
func (x *BuildFinished) GetFinishTimeMillis() int64 {
	if x != nil {
		return x.FinishTimeMillis
	}
	return 0
}

func (x *BuildFinished) GetFinishTime() *timestamppb.Timestamp {
	if x != nil {
		return x.FinishTime
	}
	return nil
}

// Deprecated: Do not use.
func (x *BuildFinished) GetAnomalyReport() *BuildFinished_AnomalyReport {
	if x != nil {
		return x.AnomalyReport
	}
	return nil
}

type BuildMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ActionSummary     *BuildMetrics_ActionSummary     `protobuf:"bytes,1,opt,name=action_summary,json=actionSummary,proto3" json:"action_summary,omitempty"`
	MemoryMetrics     *BuildMetrics_MemoryMetrics     `protobuf:"bytes,2,opt,name=memory_metrics,json=memoryMetrics,proto3" json:"memory_metrics,omitempty"`
	TargetMetrics     *BuildMetrics_TargetMetrics     `protobuf:"bytes,3,opt,name=target_metrics,json=targetMetrics,proto3" json:"target_metrics,omitempty"`
	PackageMetrics    *BuildMetrics_PackageMetrics    `protobuf:"bytes,4,opt,name=package_metrics,json=packageMetrics,proto3" json:"package_metrics,omitempty"`
	TimingMetrics     *BuildMetrics_TimingMetrics     `protobuf:"bytes,5,opt,name=timing_metrics,json=timingMetrics,proto3" json:"timing_metrics,omitempty"`
	CumulativeMetrics *BuildMetrics_CumulativeMetrics `protobuf:"bytes,6,opt,name=cumulative_metrics,json=cumulativeMetrics,proto3" json:"cumulative_metrics,omitempty"`
	ArtifactMetrics   *BuildMetrics_ArtifactMetrics   `protobuf:"bytes,7,opt,name=artifact_metrics,json=artifactMetrics,proto3" json:"artifact_metrics,omitempty"`
	BuildGraphMetrics *BuildMetrics_BuildGraphMetrics `protobuf:"bytes,8,opt,name=build_graph_metrics,json=buildGraphMetrics,proto3" json:"build_graph_metrics,omitempty"`
	WorkerMetrics     []*BuildMetrics_WorkerMetrics   `protobuf:"bytes,9,rep,name=worker_metrics,json=workerMetrics,proto3" json:"worker_metrics,omitempty"`
}

func (x *BuildMetrics) Reset() {
	*x = BuildMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics) ProtoMessage() {}

func (x *BuildMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22}
}

func (x *BuildMetrics) GetActionSummary() *BuildMetrics_ActionSummary {
	if x != nil {
		return x.ActionSummary
	}
	return nil
}

func (x *BuildMetrics) GetMemoryMetrics() *BuildMetrics_MemoryMetrics {
	if x != nil {
		return x.MemoryMetrics
	}
	return nil
}

func (x *BuildMetrics) GetTargetMetrics() *BuildMetrics_TargetMetrics {
	if x != nil {
		return x.TargetMetrics
	}
	return nil
}

func (x *BuildMetrics) GetPackageMetrics() *BuildMetrics_PackageMetrics {
	if x != nil {
		return x.PackageMetrics
	}
	return nil
}

func (x *BuildMetrics) GetTimingMetrics() *BuildMetrics_TimingMetrics {
	if x != nil {
		return x.TimingMetrics
	}
	return nil
}

func (x *BuildMetrics) GetCumulativeMetrics() *BuildMetrics_CumulativeMetrics {
	if x != nil {
		return x.CumulativeMetrics
	}
	return nil
}

func (x *BuildMetrics) GetArtifactMetrics() *BuildMetrics_ArtifactMetrics {
	if x != nil {
		return x.ArtifactMetrics
	}
	return nil
}

func (x *BuildMetrics) GetBuildGraphMetrics() *BuildMetrics_BuildGraphMetrics {
	if x != nil {
		return x.BuildGraphMetrics
	}
	return nil
}

func (x *BuildMetrics) GetWorkerMetrics() []*BuildMetrics_WorkerMetrics {
	if x != nil {
		return x.WorkerMetrics
	}
	return nil
}

// Event providing additional statistics/logs after completion of the build.
type BuildToolLogs struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Log []*File `protobuf:"bytes,1,rep,name=log,proto3" json:"log,omitempty"`
}

func (x *BuildToolLogs) Reset() {
	*x = BuildToolLogs{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildToolLogs) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildToolLogs) ProtoMessage() {}

func (x *BuildToolLogs) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildToolLogs.ProtoReflect.Descriptor instead.
func (*BuildToolLogs) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{23}
}

func (x *BuildToolLogs) GetLog() []*File {
	if x != nil {
		return x.Log
	}
	return nil
}

// Event describing all convenience symlinks (i.e., workspace symlinks) to be
// created or deleted once the execution phase has begun. Note that this event
// does not say anything about whether or not the build tool actually executed
// these filesystem operations; it only says what logical operations should be
// performed. This event is emitted exactly once per build; if no symlinks are
// to be modified, the event is still emitted with empty contents.
type ConvenienceSymlinksIdentified struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ConvenienceSymlinks []*ConvenienceSymlink `protobuf:"bytes,1,rep,name=convenience_symlinks,json=convenienceSymlinks,proto3" json:"convenience_symlinks,omitempty"`
}

func (x *ConvenienceSymlinksIdentified) Reset() {
	*x = ConvenienceSymlinksIdentified{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvenienceSymlinksIdentified) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvenienceSymlinksIdentified) ProtoMessage() {}

func (x *ConvenienceSymlinksIdentified) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvenienceSymlinksIdentified.ProtoReflect.Descriptor instead.
func (*ConvenienceSymlinksIdentified) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{24}
}

func (x *ConvenienceSymlinksIdentified) GetConvenienceSymlinks() []*ConvenienceSymlink {
	if x != nil {
		return x.ConvenienceSymlinks
	}
	return nil
}

// The message that contains what type of action to perform on a given path and
// target of a symlink.
type ConvenienceSymlink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The path of the symlink to be created or deleted, absolute or relative to
	// the workspace, creating any directories necessary. If a symlink already
	// exists at that location, then it should be replaced by a symlink pointing
	// to the new target.
	Path string `protobuf:"bytes,1,opt,name=path,proto3" json:"path,omitempty"`
	// The operation we are performing on the symlink.
	Action ConvenienceSymlink_Action `protobuf:"varint,2,opt,name=action,proto3,enum=build_event_stream.ConvenienceSymlink_Action" json:"action,omitempty"`
	// If action is CREATE, this is the target path that the symlink should point
	// to. If the path points underneath the output base, it is relative to the
	// output base; otherwise it is absolute.
	//
	// If action is DELETE, this field is not set.
	Target string `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
}

func (x *ConvenienceSymlink) Reset() {
	*x = ConvenienceSymlink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConvenienceSymlink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConvenienceSymlink) ProtoMessage() {}

func (x *ConvenienceSymlink) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConvenienceSymlink.ProtoReflect.Descriptor instead.
func (*ConvenienceSymlink) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{25}
}

func (x *ConvenienceSymlink) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ConvenienceSymlink) GetAction() ConvenienceSymlink_Action {
	if x != nil {
		return x.Action
	}
	return ConvenienceSymlink_UNKNOWN
}

func (x *ConvenienceSymlink) GetTarget() string {
	if x != nil {
		return x.Target
	}
	return ""
}

// Message describing a build event. Events will have an identifier that
// is unique within a given build invocation; they also announce follow-up
// events as children. More details, which are specific to the kind of event
// that is observed, is provided in the payload. More options for the payload
// might be added in the future.
type BuildEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *BuildEventId   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Children    []*BuildEventId `protobuf:"bytes,2,rep,name=children,proto3" json:"children,omitempty"`
	LastMessage bool            `protobuf:"varint,20,opt,name=last_message,json=lastMessage,proto3" json:"last_message,omitempty"`
	// Types that are assignable to Payload:
	//	*BuildEvent_Progress
	//	*BuildEvent_Aborted
	//	*BuildEvent_Started
	//	*BuildEvent_UnstructuredCommandLine
	//	*BuildEvent_StructuredCommandLine
	//	*BuildEvent_OptionsParsed
	//	*BuildEvent_WorkspaceStatus
	//	*BuildEvent_Fetch
	//	*BuildEvent_Configuration
	//	*BuildEvent_Expanded
	//	*BuildEvent_Configured
	//	*BuildEvent_Action
	//	*BuildEvent_NamedSetOfFiles
	//	*BuildEvent_Completed
	//	*BuildEvent_TestResult
	//	*BuildEvent_TestSummary
	//	*BuildEvent_TargetSummary
	//	*BuildEvent_Finished
	//	*BuildEvent_BuildToolLogs
	//	*BuildEvent_BuildMetrics
	//	*BuildEvent_WorkspaceInfo
	//	*BuildEvent_BuildMetadata
	//	*BuildEvent_ConvenienceSymlinksIdentified
	Payload isBuildEvent_Payload `protobuf_oneof:"payload"`
}

func (x *BuildEvent) Reset() {
	*x = BuildEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEvent) ProtoMessage() {}

func (x *BuildEvent) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEvent.ProtoReflect.Descriptor instead.
func (*BuildEvent) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{26}
}

func (x *BuildEvent) GetId() *BuildEventId {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *BuildEvent) GetChildren() []*BuildEventId {
	if x != nil {
		return x.Children
	}
	return nil
}

func (x *BuildEvent) GetLastMessage() bool {
	if x != nil {
		return x.LastMessage
	}
	return false
}

func (m *BuildEvent) GetPayload() isBuildEvent_Payload {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (x *BuildEvent) GetProgress() *Progress {
	if x, ok := x.GetPayload().(*BuildEvent_Progress); ok {
		return x.Progress
	}
	return nil
}

func (x *BuildEvent) GetAborted() *Aborted {
	if x, ok := x.GetPayload().(*BuildEvent_Aborted); ok {
		return x.Aborted
	}
	return nil
}

func (x *BuildEvent) GetStarted() *BuildStarted {
	if x, ok := x.GetPayload().(*BuildEvent_Started); ok {
		return x.Started
	}
	return nil
}

func (x *BuildEvent) GetUnstructuredCommandLine() *UnstructuredCommandLine {
	if x, ok := x.GetPayload().(*BuildEvent_UnstructuredCommandLine); ok {
		return x.UnstructuredCommandLine
	}
	return nil
}

func (x *BuildEvent) GetStructuredCommandLine() *bep_proto.CommandLine {
	if x, ok := x.GetPayload().(*BuildEvent_StructuredCommandLine); ok {
		return x.StructuredCommandLine
	}
	return nil
}

func (x *BuildEvent) GetOptionsParsed() *OptionsParsed {
	if x, ok := x.GetPayload().(*BuildEvent_OptionsParsed); ok {
		return x.OptionsParsed
	}
	return nil
}

func (x *BuildEvent) GetWorkspaceStatus() *WorkspaceStatus {
	if x, ok := x.GetPayload().(*BuildEvent_WorkspaceStatus); ok {
		return x.WorkspaceStatus
	}
	return nil
}

func (x *BuildEvent) GetFetch() *Fetch {
	if x, ok := x.GetPayload().(*BuildEvent_Fetch); ok {
		return x.Fetch
	}
	return nil
}

func (x *BuildEvent) GetConfiguration() *Configuration {
	if x, ok := x.GetPayload().(*BuildEvent_Configuration); ok {
		return x.Configuration
	}
	return nil
}

func (x *BuildEvent) GetExpanded() *PatternExpanded {
	if x, ok := x.GetPayload().(*BuildEvent_Expanded); ok {
		return x.Expanded
	}
	return nil
}

func (x *BuildEvent) GetConfigured() *TargetConfigured {
	if x, ok := x.GetPayload().(*BuildEvent_Configured); ok {
		return x.Configured
	}
	return nil
}

func (x *BuildEvent) GetAction() *ActionExecuted {
	if x, ok := x.GetPayload().(*BuildEvent_Action); ok {
		return x.Action
	}
	return nil
}

func (x *BuildEvent) GetNamedSetOfFiles() *NamedSetOfFiles {
	if x, ok := x.GetPayload().(*BuildEvent_NamedSetOfFiles); ok {
		return x.NamedSetOfFiles
	}
	return nil
}

func (x *BuildEvent) GetCompleted() *TargetComplete {
	if x, ok := x.GetPayload().(*BuildEvent_Completed); ok {
		return x.Completed
	}
	return nil
}

func (x *BuildEvent) GetTestResult() *TestResult {
	if x, ok := x.GetPayload().(*BuildEvent_TestResult); ok {
		return x.TestResult
	}
	return nil
}

func (x *BuildEvent) GetTestSummary() *TestSummary {
	if x, ok := x.GetPayload().(*BuildEvent_TestSummary); ok {
		return x.TestSummary
	}
	return nil
}

func (x *BuildEvent) GetTargetSummary() *TargetSummary {
	if x, ok := x.GetPayload().(*BuildEvent_TargetSummary); ok {
		return x.TargetSummary
	}
	return nil
}

func (x *BuildEvent) GetFinished() *BuildFinished {
	if x, ok := x.GetPayload().(*BuildEvent_Finished); ok {
		return x.Finished
	}
	return nil
}

func (x *BuildEvent) GetBuildToolLogs() *BuildToolLogs {
	if x, ok := x.GetPayload().(*BuildEvent_BuildToolLogs); ok {
		return x.BuildToolLogs
	}
	return nil
}

func (x *BuildEvent) GetBuildMetrics() *BuildMetrics {
	if x, ok := x.GetPayload().(*BuildEvent_BuildMetrics); ok {
		return x.BuildMetrics
	}
	return nil
}

func (x *BuildEvent) GetWorkspaceInfo() *WorkspaceConfig {
	if x, ok := x.GetPayload().(*BuildEvent_WorkspaceInfo); ok {
		return x.WorkspaceInfo
	}
	return nil
}

func (x *BuildEvent) GetBuildMetadata() *BuildMetadata {
	if x, ok := x.GetPayload().(*BuildEvent_BuildMetadata); ok {
		return x.BuildMetadata
	}
	return nil
}

func (x *BuildEvent) GetConvenienceSymlinksIdentified() *ConvenienceSymlinksIdentified {
	if x, ok := x.GetPayload().(*BuildEvent_ConvenienceSymlinksIdentified); ok {
		return x.ConvenienceSymlinksIdentified
	}
	return nil
}

type isBuildEvent_Payload interface {
	isBuildEvent_Payload()
}

type BuildEvent_Progress struct {
	Progress *Progress `protobuf:"bytes,3,opt,name=progress,proto3,oneof"`
}

type BuildEvent_Aborted struct {
	Aborted *Aborted `protobuf:"bytes,4,opt,name=aborted,proto3,oneof"`
}

type BuildEvent_Started struct {
	Started *BuildStarted `protobuf:"bytes,5,opt,name=started,proto3,oneof"`
}

type BuildEvent_UnstructuredCommandLine struct {
	UnstructuredCommandLine *UnstructuredCommandLine `protobuf:"bytes,12,opt,name=unstructured_command_line,json=unstructuredCommandLine,proto3,oneof"`
}

type BuildEvent_StructuredCommandLine struct {
	StructuredCommandLine *bep_proto.CommandLine `protobuf:"bytes,22,opt,name=structured_command_line,json=structuredCommandLine,proto3,oneof"`
}

type BuildEvent_OptionsParsed struct {
	OptionsParsed *OptionsParsed `protobuf:"bytes,13,opt,name=options_parsed,json=optionsParsed,proto3,oneof"`
}

type BuildEvent_WorkspaceStatus struct {
	WorkspaceStatus *WorkspaceStatus `protobuf:"bytes,16,opt,name=workspace_status,json=workspaceStatus,proto3,oneof"`
}

type BuildEvent_Fetch struct {
	Fetch *Fetch `protobuf:"bytes,21,opt,name=fetch,proto3,oneof"`
}

type BuildEvent_Configuration struct {
	Configuration *Configuration `protobuf:"bytes,17,opt,name=configuration,proto3,oneof"`
}

type BuildEvent_Expanded struct {
	Expanded *PatternExpanded `protobuf:"bytes,6,opt,name=expanded,proto3,oneof"`
}

type BuildEvent_Configured struct {
	Configured *TargetConfigured `protobuf:"bytes,18,opt,name=configured,proto3,oneof"`
}

type BuildEvent_Action struct {
	Action *ActionExecuted `protobuf:"bytes,7,opt,name=action,proto3,oneof"`
}

type BuildEvent_NamedSetOfFiles struct {
	NamedSetOfFiles *NamedSetOfFiles `protobuf:"bytes,15,opt,name=named_set_of_files,json=namedSetOfFiles,proto3,oneof"`
}

type BuildEvent_Completed struct {
	Completed *TargetComplete `protobuf:"bytes,8,opt,name=completed,proto3,oneof"`
}

type BuildEvent_TestResult struct {
	TestResult *TestResult `protobuf:"bytes,10,opt,name=test_result,json=testResult,proto3,oneof"`
}

type BuildEvent_TestSummary struct {
	TestSummary *TestSummary `protobuf:"bytes,9,opt,name=test_summary,json=testSummary,proto3,oneof"`
}

type BuildEvent_TargetSummary struct {
	TargetSummary *TargetSummary `protobuf:"bytes,28,opt,name=target_summary,json=targetSummary,proto3,oneof"`
}

type BuildEvent_Finished struct {
	Finished *BuildFinished `protobuf:"bytes,14,opt,name=finished,proto3,oneof"`
}

type BuildEvent_BuildToolLogs struct {
	BuildToolLogs *BuildToolLogs `protobuf:"bytes,23,opt,name=build_tool_logs,json=buildToolLogs,proto3,oneof"`
}

type BuildEvent_BuildMetrics struct {
	BuildMetrics *BuildMetrics `protobuf:"bytes,24,opt,name=build_metrics,json=buildMetrics,proto3,oneof"`
}

type BuildEvent_WorkspaceInfo struct {
	WorkspaceInfo *WorkspaceConfig `protobuf:"bytes,25,opt,name=workspace_info,json=workspaceInfo,proto3,oneof"`
}

type BuildEvent_BuildMetadata struct {
	BuildMetadata *BuildMetadata `protobuf:"bytes,26,opt,name=build_metadata,json=buildMetadata,proto3,oneof"`
}

type BuildEvent_ConvenienceSymlinksIdentified struct {
	ConvenienceSymlinksIdentified *ConvenienceSymlinksIdentified `protobuf:"bytes,27,opt,name=convenience_symlinks_identified,json=convenienceSymlinksIdentified,proto3,oneof"`
}

func (*BuildEvent_Progress) isBuildEvent_Payload() {}

func (*BuildEvent_Aborted) isBuildEvent_Payload() {}

func (*BuildEvent_Started) isBuildEvent_Payload() {}

func (*BuildEvent_UnstructuredCommandLine) isBuildEvent_Payload() {}

func (*BuildEvent_StructuredCommandLine) isBuildEvent_Payload() {}

func (*BuildEvent_OptionsParsed) isBuildEvent_Payload() {}

func (*BuildEvent_WorkspaceStatus) isBuildEvent_Payload() {}

func (*BuildEvent_Fetch) isBuildEvent_Payload() {}

func (*BuildEvent_Configuration) isBuildEvent_Payload() {}

func (*BuildEvent_Expanded) isBuildEvent_Payload() {}

func (*BuildEvent_Configured) isBuildEvent_Payload() {}

func (*BuildEvent_Action) isBuildEvent_Payload() {}

func (*BuildEvent_NamedSetOfFiles) isBuildEvent_Payload() {}

func (*BuildEvent_Completed) isBuildEvent_Payload() {}

func (*BuildEvent_TestResult) isBuildEvent_Payload() {}

func (*BuildEvent_TestSummary) isBuildEvent_Payload() {}

func (*BuildEvent_TargetSummary) isBuildEvent_Payload() {}

func (*BuildEvent_Finished) isBuildEvent_Payload() {}

func (*BuildEvent_BuildToolLogs) isBuildEvent_Payload() {}

func (*BuildEvent_BuildMetrics) isBuildEvent_Payload() {}

func (*BuildEvent_WorkspaceInfo) isBuildEvent_Payload() {}

func (*BuildEvent_BuildMetadata) isBuildEvent_Payload() {}

func (*BuildEvent_ConvenienceSymlinksIdentified) isBuildEvent_Payload() {}

// Generic identifier for a build event. This is the default type of
// BuildEventId, but should not be used outside testing; nevertheless,
// tools should handle build events with this kind of id gracefully.
type BuildEventId_UnknownBuildEventId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Details string `protobuf:"bytes,1,opt,name=details,proto3" json:"details,omitempty"`
}

func (x *BuildEventId_UnknownBuildEventId) Reset() {
	*x = BuildEventId_UnknownBuildEventId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_UnknownBuildEventId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_UnknownBuildEventId) ProtoMessage() {}

func (x *BuildEventId_UnknownBuildEventId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_UnknownBuildEventId.ProtoReflect.Descriptor instead.
func (*BuildEventId_UnknownBuildEventId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BuildEventId_UnknownBuildEventId) GetDetails() string {
	if x != nil {
		return x.Details
	}
	return ""
}

// Identifier of an event reporting progress. Those events are also used to
// chain in events that come early.
type BuildEventId_ProgressId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique identifier. No assumption should be made about how the ids are
	// assigned; the only meaningful operation on this field is test for
	// equality.
	OpaqueCount int32 `protobuf:"varint,1,opt,name=opaque_count,json=opaqueCount,proto3" json:"opaque_count,omitempty"`
}

func (x *BuildEventId_ProgressId) Reset() {
	*x = BuildEventId_ProgressId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_ProgressId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_ProgressId) ProtoMessage() {}

func (x *BuildEventId_ProgressId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_ProgressId.ProtoReflect.Descriptor instead.
func (*BuildEventId_ProgressId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BuildEventId_ProgressId) GetOpaqueCount() int32 {
	if x != nil {
		return x.OpaqueCount
	}
	return 0
}

// Identifier of an event indicating the beginning of a build; this will
// normally be the first event.
type BuildEventId_BuildStartedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_BuildStartedId) Reset() {
	*x = BuildEventId_BuildStartedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_BuildStartedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_BuildStartedId) ProtoMessage() {}

func (x *BuildEventId_BuildStartedId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_BuildStartedId.ProtoReflect.Descriptor instead.
func (*BuildEventId_BuildStartedId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 2}
}

// Identifier on an event indicating the original commandline received by
// the bazel server.
type BuildEventId_UnstructuredCommandLineId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_UnstructuredCommandLineId) Reset() {
	*x = BuildEventId_UnstructuredCommandLineId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_UnstructuredCommandLineId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_UnstructuredCommandLineId) ProtoMessage() {}

func (x *BuildEventId_UnstructuredCommandLineId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_UnstructuredCommandLineId.ProtoReflect.Descriptor instead.
func (*BuildEventId_UnstructuredCommandLineId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 3}
}

// Identifier on an event describing the commandline received by Bazel.
type BuildEventId_StructuredCommandLineId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// A title for this command line value, as there may be multiple.
	// For example, a single invocation may wish to report both the literal and
	// canonical command lines, and this label would be used to differentiate
	// between both versions.
	CommandLineLabel string `protobuf:"bytes,1,opt,name=command_line_label,json=commandLineLabel,proto3" json:"command_line_label,omitempty"`
}

func (x *BuildEventId_StructuredCommandLineId) Reset() {
	*x = BuildEventId_StructuredCommandLineId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_StructuredCommandLineId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_StructuredCommandLineId) ProtoMessage() {}

func (x *BuildEventId_StructuredCommandLineId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_StructuredCommandLineId.ProtoReflect.Descriptor instead.
func (*BuildEventId_StructuredCommandLineId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 4}
}

func (x *BuildEventId_StructuredCommandLineId) GetCommandLineLabel() string {
	if x != nil {
		return x.CommandLineLabel
	}
	return ""
}

// Identifier of an event indicating the workspace status.
type BuildEventId_WorkspaceStatusId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_WorkspaceStatusId) Reset() {
	*x = BuildEventId_WorkspaceStatusId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_WorkspaceStatusId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_WorkspaceStatusId) ProtoMessage() {}

func (x *BuildEventId_WorkspaceStatusId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_WorkspaceStatusId.ProtoReflect.Descriptor instead.
func (*BuildEventId_WorkspaceStatusId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 5}
}

// Identifier on an event reporting on the options included in the command
// line, both explicitly and implicitly.
type BuildEventId_OptionsParsedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_OptionsParsedId) Reset() {
	*x = BuildEventId_OptionsParsedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_OptionsParsedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_OptionsParsedId) ProtoMessage() {}

func (x *BuildEventId_OptionsParsedId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_OptionsParsedId.ProtoReflect.Descriptor instead.
func (*BuildEventId_OptionsParsedId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 6}
}

// Identifier of an event reporting that an external resource was fetched
// from.
type BuildEventId_FetchId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The external resource that was fetched from.
	Url string `protobuf:"bytes,1,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *BuildEventId_FetchId) Reset() {
	*x = BuildEventId_FetchId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_FetchId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_FetchId) ProtoMessage() {}

func (x *BuildEventId_FetchId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_FetchId.ProtoReflect.Descriptor instead.
func (*BuildEventId_FetchId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 7}
}

func (x *BuildEventId_FetchId) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

// Identifier of an event indicating that a target pattern has been expanded
// further.
// Messages of this shape are also used to describe parts of a pattern that
// have been skipped for some reason, if the actual expansion was still
// carried out (e.g., if keep_going is set). In this case, the
// pattern_skipped choice in the id field is to be made.
type BuildEventId_PatternExpandedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Pattern []string `protobuf:"bytes,1,rep,name=pattern,proto3" json:"pattern,omitempty"`
}

func (x *BuildEventId_PatternExpandedId) Reset() {
	*x = BuildEventId_PatternExpandedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_PatternExpandedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_PatternExpandedId) ProtoMessage() {}

func (x *BuildEventId_PatternExpandedId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_PatternExpandedId.ProtoReflect.Descriptor instead.
func (*BuildEventId_PatternExpandedId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 8}
}

func (x *BuildEventId_PatternExpandedId) GetPattern() []string {
	if x != nil {
		return x.Pattern
	}
	return nil
}

type BuildEventId_WorkspaceConfigId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_WorkspaceConfigId) Reset() {
	*x = BuildEventId_WorkspaceConfigId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_WorkspaceConfigId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_WorkspaceConfigId) ProtoMessage() {}

func (x *BuildEventId_WorkspaceConfigId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_WorkspaceConfigId.ProtoReflect.Descriptor instead.
func (*BuildEventId_WorkspaceConfigId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 9}
}

type BuildEventId_BuildMetadataId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_BuildMetadataId) Reset() {
	*x = BuildEventId_BuildMetadataId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_BuildMetadataId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_BuildMetadataId) ProtoMessage() {}

func (x *BuildEventId_BuildMetadataId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_BuildMetadataId.ProtoReflect.Descriptor instead.
func (*BuildEventId_BuildMetadataId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 10}
}

// Identifier of an event indicating that a target has been expanded by
// identifying for which configurations it should be build.
type BuildEventId_TargetConfiguredId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// If empty, the id refers to the expansion of the target. If not-empty,
	// the id refers to the expansion of an aspect applied to the (already
	// expanded) target.
	//
	// For example, when building an apple_binary that depends on proto_library
	// "//:foo_proto", there will be two TargetConfigured events for
	// "//:foo_proto":
	//
	// 1. An event with an empty aspect, corresponding to actions producing
	// language-agnostic outputs from the proto_library; and
	// 2. An event with aspect "ObjcProtoAspect", corresponding to Objective-C
	// code generation.
	Aspect string `protobuf:"bytes,2,opt,name=aspect,proto3" json:"aspect,omitempty"`
}

func (x *BuildEventId_TargetConfiguredId) Reset() {
	*x = BuildEventId_TargetConfiguredId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_TargetConfiguredId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_TargetConfiguredId) ProtoMessage() {}

func (x *BuildEventId_TargetConfiguredId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_TargetConfiguredId.ProtoReflect.Descriptor instead.
func (*BuildEventId_TargetConfiguredId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 11}
}

func (x *BuildEventId_TargetConfiguredId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BuildEventId_TargetConfiguredId) GetAspect() string {
	if x != nil {
		return x.Aspect
	}
	return ""
}

// Identifier of an event introducing a named set of files (usually artifacts)
// to be referred to in later messages.
type BuildEventId_NamedSetOfFilesId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the file set; this is an opaque string valid only for the
	// particular instance of the event stream.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BuildEventId_NamedSetOfFilesId) Reset() {
	*x = BuildEventId_NamedSetOfFilesId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_NamedSetOfFilesId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_NamedSetOfFilesId) ProtoMessage() {}

func (x *BuildEventId_NamedSetOfFilesId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_NamedSetOfFilesId.ProtoReflect.Descriptor instead.
func (*BuildEventId_NamedSetOfFilesId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 12}
}

func (x *BuildEventId_NamedSetOfFilesId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Identifier of an event introducing a configuration.
type BuildEventId_ConfigurationId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identifier of the configuration; users of the protocol should not make
	// any assumptions about it having any structure, or equality of the
	// identifier between different streams.
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *BuildEventId_ConfigurationId) Reset() {
	*x = BuildEventId_ConfigurationId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_ConfigurationId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_ConfigurationId) ProtoMessage() {}

func (x *BuildEventId_ConfigurationId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_ConfigurationId.ProtoReflect.Descriptor instead.
func (*BuildEventId_ConfigurationId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 13}
}

func (x *BuildEventId_ConfigurationId) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

// Identifier of an event indicating that a target was built completely; this
// does not include running the test if the target is a test target.
type BuildEventId_TargetCompletedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	// The configuration for which the target was built.
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
	// If empty, the id refers to the completion of the target. If not-empty,
	// the id refers to the completion of an aspect applied to the (already
	// completed) target.
	//
	// For example, when building an apple_binary that depends on proto_library
	// "//:foo_proto", there will be two TargetCompleted events for
	// "//:foo_proto":
	//
	// 1. An event with an empty aspect, corresponding to actions producing
	// language-agnostic outputs from the proto_library; and
	// 2. An event with aspect "ObjcProtoAspect", corresponding to Objective-C
	// code generation.
	Aspect string `protobuf:"bytes,2,opt,name=aspect,proto3" json:"aspect,omitempty"`
}

func (x *BuildEventId_TargetCompletedId) Reset() {
	*x = BuildEventId_TargetCompletedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_TargetCompletedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_TargetCompletedId) ProtoMessage() {}

func (x *BuildEventId_TargetCompletedId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_TargetCompletedId.ProtoReflect.Descriptor instead.
func (*BuildEventId_TargetCompletedId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 14}
}

func (x *BuildEventId_TargetCompletedId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BuildEventId_TargetCompletedId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *BuildEventId_TargetCompletedId) GetAspect() string {
	if x != nil {
		return x.Aspect
	}
	return ""
}

// Identifier of an event reporting that an action was completed (not all
// actions are reported, only the ones that can be considered important;
// this includes all failed actions).
type BuildEventId_ActionCompletedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrimaryOutput string `protobuf:"bytes,1,opt,name=primary_output,json=primaryOutput,proto3" json:"primary_output,omitempty"`
	// Optional, the label of the owner of the action, for reference.
	Label string `protobuf:"bytes,2,opt,name=label,proto3" json:"label,omitempty"`
	// Optional, the id of the configuration of the action owner.
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,3,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *BuildEventId_ActionCompletedId) Reset() {
	*x = BuildEventId_ActionCompletedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_ActionCompletedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_ActionCompletedId) ProtoMessage() {}

func (x *BuildEventId_ActionCompletedId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_ActionCompletedId.ProtoReflect.Descriptor instead.
func (*BuildEventId_ActionCompletedId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 15}
}

func (x *BuildEventId_ActionCompletedId) GetPrimaryOutput() string {
	if x != nil {
		return x.PrimaryOutput
	}
	return ""
}

func (x *BuildEventId_ActionCompletedId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BuildEventId_ActionCompletedId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Identifier of an event reporting an event associated with an unconfigured
// label. Usually, this indicates a failure due to a missing input file. In
// any case, it will report some form of error (i.e., the payload will be an
// Aborted event); there are no regular events using this identifier. The
// purpose of those events is to serve as the root cause of a failed target.
type BuildEventId_UnconfiguredLabelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label string `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
}

func (x *BuildEventId_UnconfiguredLabelId) Reset() {
	*x = BuildEventId_UnconfiguredLabelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_UnconfiguredLabelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_UnconfiguredLabelId) ProtoMessage() {}

func (x *BuildEventId_UnconfiguredLabelId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_UnconfiguredLabelId.ProtoReflect.Descriptor instead.
func (*BuildEventId_UnconfiguredLabelId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 16}
}

func (x *BuildEventId_UnconfiguredLabelId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

// Identifier of an event reporting an event associated with a configured
// label, usually a visibility error. In any case, an event with such an
// id will always report some form of error (i.e., the payload will be an
// Aborted event); there are no regular events using this identifier.
type BuildEventId_ConfiguredLabelId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *BuildEventId_ConfiguredLabelId) Reset() {
	*x = BuildEventId_ConfiguredLabelId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_ConfiguredLabelId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_ConfiguredLabelId) ProtoMessage() {}

func (x *BuildEventId_ConfiguredLabelId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_ConfiguredLabelId.ProtoReflect.Descriptor instead.
func (*BuildEventId_ConfiguredLabelId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 17}
}

func (x *BuildEventId_ConfiguredLabelId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BuildEventId_ConfiguredLabelId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Identifier of an event reporting on an individual test run. The label
// identifies the test that is reported about, the remaining fields are
// in such a way as to uniquely identify the action within a build. In fact,
// attempts for the same test, run, shard triple are counted sequentially,
// starting with 1.
type BuildEventId_TestResultId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,5,opt,name=configuration,proto3" json:"configuration,omitempty"`
	Run           int32                         `protobuf:"varint,2,opt,name=run,proto3" json:"run,omitempty"`
	Shard         int32                         `protobuf:"varint,3,opt,name=shard,proto3" json:"shard,omitempty"`
	Attempt       int32                         `protobuf:"varint,4,opt,name=attempt,proto3" json:"attempt,omitempty"`
}

func (x *BuildEventId_TestResultId) Reset() {
	*x = BuildEventId_TestResultId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_TestResultId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_TestResultId) ProtoMessage() {}

func (x *BuildEventId_TestResultId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_TestResultId.ProtoReflect.Descriptor instead.
func (*BuildEventId_TestResultId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 18}
}

func (x *BuildEventId_TestResultId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BuildEventId_TestResultId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x != nil {
		return x.Configuration
	}
	return nil
}

func (x *BuildEventId_TestResultId) GetRun() int32 {
	if x != nil {
		return x.Run
	}
	return 0
}

func (x *BuildEventId_TestResultId) GetShard() int32 {
	if x != nil {
		return x.Shard
	}
	return 0
}

func (x *BuildEventId_TestResultId) GetAttempt() int32 {
	if x != nil {
		return x.Attempt
	}
	return 0
}

// Identifier of an event reporting the summary of a test.
type BuildEventId_TestSummaryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *BuildEventId_TestSummaryId) Reset() {
	*x = BuildEventId_TestSummaryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_TestSummaryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_TestSummaryId) ProtoMessage() {}

func (x *BuildEventId_TestSummaryId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_TestSummaryId.ProtoReflect.Descriptor instead.
func (*BuildEventId_TestSummaryId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 19}
}

func (x *BuildEventId_TestSummaryId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BuildEventId_TestSummaryId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Identifier of an event reporting the summary of a target.
type BuildEventId_TargetSummaryId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Label         string                        `protobuf:"bytes,1,opt,name=label,proto3" json:"label,omitempty"`
	Configuration *BuildEventId_ConfigurationId `protobuf:"bytes,2,opt,name=configuration,proto3" json:"configuration,omitempty"`
}

func (x *BuildEventId_TargetSummaryId) Reset() {
	*x = BuildEventId_TargetSummaryId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_TargetSummaryId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_TargetSummaryId) ProtoMessage() {}

func (x *BuildEventId_TargetSummaryId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_TargetSummaryId.ProtoReflect.Descriptor instead.
func (*BuildEventId_TargetSummaryId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 20}
}

func (x *BuildEventId_TargetSummaryId) GetLabel() string {
	if x != nil {
		return x.Label
	}
	return ""
}

func (x *BuildEventId_TargetSummaryId) GetConfiguration() *BuildEventId_ConfigurationId {
	if x != nil {
		return x.Configuration
	}
	return nil
}

// Identifier of the BuildFinished event, indicating the end of a build.
type BuildEventId_BuildFinishedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_BuildFinishedId) Reset() {
	*x = BuildEventId_BuildFinishedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_BuildFinishedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_BuildFinishedId) ProtoMessage() {}

func (x *BuildEventId_BuildFinishedId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_BuildFinishedId.ProtoReflect.Descriptor instead.
func (*BuildEventId_BuildFinishedId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 21}
}

// Identifier of an event providing additional logs/statistics after
// completion of the build.
type BuildEventId_BuildToolLogsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_BuildToolLogsId) Reset() {
	*x = BuildEventId_BuildToolLogsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_BuildToolLogsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_BuildToolLogsId) ProtoMessage() {}

func (x *BuildEventId_BuildToolLogsId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_BuildToolLogsId.ProtoReflect.Descriptor instead.
func (*BuildEventId_BuildToolLogsId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 22}
}

// Identifier of an event providing build metrics after completion
// of the build.
type BuildEventId_BuildMetricsId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_BuildMetricsId) Reset() {
	*x = BuildEventId_BuildMetricsId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_BuildMetricsId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_BuildMetricsId) ProtoMessage() {}

func (x *BuildEventId_BuildMetricsId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_BuildMetricsId.ProtoReflect.Descriptor instead.
func (*BuildEventId_BuildMetricsId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 23}
}

// Identifier of an event providing convenience symlinks information.
type BuildEventId_ConvenienceSymlinksIdentifiedId struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BuildEventId_ConvenienceSymlinksIdentifiedId) Reset() {
	*x = BuildEventId_ConvenienceSymlinksIdentifiedId{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildEventId_ConvenienceSymlinksIdentifiedId) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildEventId_ConvenienceSymlinksIdentifiedId) ProtoMessage() {}

func (x *BuildEventId_ConvenienceSymlinksIdentifiedId) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildEventId_ConvenienceSymlinksIdentifiedId.ProtoReflect.Descriptor instead.
func (*BuildEventId_ConvenienceSymlinksIdentifiedId) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{0, 24}
}

type WorkspaceStatus_Item struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   string `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value string `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *WorkspaceStatus_Item) Reset() {
	*x = WorkspaceStatus_Item{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WorkspaceStatus_Item) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WorkspaceStatus_Item) ProtoMessage() {}

func (x *WorkspaceStatus_Item) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WorkspaceStatus_Item.ProtoReflect.Descriptor instead.
func (*WorkspaceStatus_Item) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{8, 0}
}

func (x *WorkspaceStatus_Item) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *WorkspaceStatus_Item) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

// Represents a test_suite target and the tests that it expanded to. Nested
// test suites are recursively expanded. The test labels only contain the
// final test targets, not any nested suites.
type PatternExpanded_TestSuiteExpansion struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The label of the test_suite rule.
	SuiteLabel string `protobuf:"bytes,1,opt,name=suite_label,json=suiteLabel,proto3" json:"suite_label,omitempty"`
	// Labels of the test targets included in the suite. Includes all tests in
	// the suite regardless of any filters or negative patterns which may result
	// in the test not actually being run.
	TestLabels []string `protobuf:"bytes,2,rep,name=test_labels,json=testLabels,proto3" json:"test_labels,omitempty"`
}

func (x *PatternExpanded_TestSuiteExpansion) Reset() {
	*x = PatternExpanded_TestSuiteExpansion{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PatternExpanded_TestSuiteExpansion) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PatternExpanded_TestSuiteExpansion) ProtoMessage() {}

func (x *PatternExpanded_TestSuiteExpansion) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PatternExpanded_TestSuiteExpansion.ProtoReflect.Descriptor instead.
func (*PatternExpanded_TestSuiteExpansion) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{11, 0}
}

func (x *PatternExpanded_TestSuiteExpansion) GetSuiteLabel() string {
	if x != nil {
		return x.SuiteLabel
	}
	return ""
}

func (x *PatternExpanded_TestSuiteExpansion) GetTestLabels() []string {
	if x != nil {
		return x.TestLabels
	}
	return nil
}

// Message providing optional meta data on the execution of the test action,
// if available.
type TestResult_ExecutionInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated, use TargetComplete.test_timeout instead.
	//
	// Deprecated: Do not use.
	TimeoutSeconds int32 `protobuf:"varint,1,opt,name=timeout_seconds,json=timeoutSeconds,proto3" json:"timeout_seconds,omitempty"`
	// Name of the strategy to execute this test action (e.g., "local",
	// "remote")
	Strategy string `protobuf:"bytes,2,opt,name=strategy,proto3" json:"strategy,omitempty"`
	// True, if the reported attempt was a cache hit in a remote cache.
	CachedRemotely bool `protobuf:"varint,6,opt,name=cached_remotely,json=cachedRemotely,proto3" json:"cached_remotely,omitempty"`
	// The exit code of the test action.
	ExitCode int32 `protobuf:"varint,7,opt,name=exit_code,json=exitCode,proto3" json:"exit_code,omitempty"`
	// The hostname of the machine where the test action was executed (in case
	// of remote execution), if known.
	Hostname        string                                    `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	TimingBreakdown *TestResult_ExecutionInfo_TimingBreakdown `protobuf:"bytes,4,opt,name=timing_breakdown,json=timingBreakdown,proto3" json:"timing_breakdown,omitempty"`
	ResourceUsage   []*TestResult_ExecutionInfo_ResourceUsage `protobuf:"bytes,5,rep,name=resource_usage,json=resourceUsage,proto3" json:"resource_usage,omitempty"`
}

func (x *TestResult_ExecutionInfo) Reset() {
	*x = TestResult_ExecutionInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult_ExecutionInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult_ExecutionInfo) ProtoMessage() {}

func (x *TestResult_ExecutionInfo) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult_ExecutionInfo.ProtoReflect.Descriptor instead.
func (*TestResult_ExecutionInfo) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{18, 0}
}

// Deprecated: Do not use.
func (x *TestResult_ExecutionInfo) GetTimeoutSeconds() int32 {
	if x != nil {
		return x.TimeoutSeconds
	}
	return 0
}

func (x *TestResult_ExecutionInfo) GetStrategy() string {
	if x != nil {
		return x.Strategy
	}
	return ""
}

func (x *TestResult_ExecutionInfo) GetCachedRemotely() bool {
	if x != nil {
		return x.CachedRemotely
	}
	return false
}

func (x *TestResult_ExecutionInfo) GetExitCode() int32 {
	if x != nil {
		return x.ExitCode
	}
	return 0
}

func (x *TestResult_ExecutionInfo) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *TestResult_ExecutionInfo) GetTimingBreakdown() *TestResult_ExecutionInfo_TimingBreakdown {
	if x != nil {
		return x.TimingBreakdown
	}
	return nil
}

func (x *TestResult_ExecutionInfo) GetResourceUsage() []*TestResult_ExecutionInfo_ResourceUsage {
	if x != nil {
		return x.ResourceUsage
	}
	return nil
}

// Represents a hierarchical timing breakdown of an activity.
// The top level time should be the total time of the activity.
// Invariant: `time` >= sum of `time`s of all direct children.
type TestResult_ExecutionInfo_TimingBreakdown struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Child []*TestResult_ExecutionInfo_TimingBreakdown `protobuf:"bytes,1,rep,name=child,proto3" json:"child,omitempty"`
	Name  string                                      `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// Deprecated, use `time` instead.
	//
	// TODO(yannic): Remove.
	//
	// Deprecated: Do not use.
	TimeMillis int64                `protobuf:"varint,3,opt,name=time_millis,json=timeMillis,proto3" json:"time_millis,omitempty"`
	Time       *durationpb.Duration `protobuf:"bytes,4,opt,name=time,proto3" json:"time,omitempty"`
}

func (x *TestResult_ExecutionInfo_TimingBreakdown) Reset() {
	*x = TestResult_ExecutionInfo_TimingBreakdown{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult_ExecutionInfo_TimingBreakdown) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult_ExecutionInfo_TimingBreakdown) ProtoMessage() {}

func (x *TestResult_ExecutionInfo_TimingBreakdown) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult_ExecutionInfo_TimingBreakdown.ProtoReflect.Descriptor instead.
func (*TestResult_ExecutionInfo_TimingBreakdown) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{18, 0, 0}
}

func (x *TestResult_ExecutionInfo_TimingBreakdown) GetChild() []*TestResult_ExecutionInfo_TimingBreakdown {
	if x != nil {
		return x.Child
	}
	return nil
}

func (x *TestResult_ExecutionInfo_TimingBreakdown) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// Deprecated: Do not use.
func (x *TestResult_ExecutionInfo_TimingBreakdown) GetTimeMillis() int64 {
	if x != nil {
		return x.TimeMillis
	}
	return 0
}

func (x *TestResult_ExecutionInfo_TimingBreakdown) GetTime() *durationpb.Duration {
	if x != nil {
		return x.Time
	}
	return nil
}

type TestResult_ExecutionInfo_ResourceUsage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value int64  `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *TestResult_ExecutionInfo_ResourceUsage) Reset() {
	*x = TestResult_ExecutionInfo_ResourceUsage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TestResult_ExecutionInfo_ResourceUsage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TestResult_ExecutionInfo_ResourceUsage) ProtoMessage() {}

func (x *TestResult_ExecutionInfo_ResourceUsage) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TestResult_ExecutionInfo_ResourceUsage.ProtoReflect.Descriptor instead.
func (*TestResult_ExecutionInfo_ResourceUsage) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{18, 0, 1}
}

func (x *TestResult_ExecutionInfo_ResourceUsage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TestResult_ExecutionInfo_ResourceUsage) GetValue() int64 {
	if x != nil {
		return x.Value
	}
	return 0
}

// Exit code of a build. The possible values correspond to the predefined
// codes in bazel's lib.ExitCode class, as well as any custom exit code a
// module might define. The predefined exit codes are subject to change (but
// rarely do) and are not part of the public API.
//
// A build was successful iff ExitCode.code equals 0.
type BuildFinished_ExitCode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The name of the exit code.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// The exit code.
	Code int32 `protobuf:"varint,2,opt,name=code,proto3" json:"code,omitempty"`
}

func (x *BuildFinished_ExitCode) Reset() {
	*x = BuildFinished_ExitCode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildFinished_ExitCode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildFinished_ExitCode) ProtoMessage() {}

func (x *BuildFinished_ExitCode) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildFinished_ExitCode.ProtoReflect.Descriptor instead.
func (*BuildFinished_ExitCode) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{21, 0}
}

func (x *BuildFinished_ExitCode) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuildFinished_ExitCode) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

// Things that happened during the build that could be of interest.
type BuildFinished_AnomalyReport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Was the build suspended at any time during the build.
	// Examples of suspensions are SIGSTOP, or the hardware being put to sleep.
	// If was_suspended is true, then most of the timings for this build are
	// suspect.
	// NOTE: This is no longer set and is deprecated.
	WasSuspended bool `protobuf:"varint,1,opt,name=was_suspended,json=wasSuspended,proto3" json:"was_suspended,omitempty"`
}

func (x *BuildFinished_AnomalyReport) Reset() {
	*x = BuildFinished_AnomalyReport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildFinished_AnomalyReport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildFinished_AnomalyReport) ProtoMessage() {}

func (x *BuildFinished_AnomalyReport) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildFinished_AnomalyReport.ProtoReflect.Descriptor instead.
func (*BuildFinished_AnomalyReport) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{21, 1}
}

func (x *BuildFinished_AnomalyReport) GetWasSuspended() bool {
	if x != nil {
		return x.WasSuspended
	}
	return false
}

type BuildMetrics_ActionSummary struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The total number of actions created and registered during the build,
	// including both aspects and configured targets. This metric includes
	// unused actions that were constructed but not executed during this build.
	// It does not include actions that were created on prior builds that are
	// still valid, even if those actions had to be re-executed on this build.
	// For the total number of actions that would be created if this invocation
	// were "clean", see BuildGraphMetrics below.
	ActionsCreated int64 `protobuf:"varint,1,opt,name=actions_created,json=actionsCreated,proto3" json:"actions_created,omitempty"`
	// The total number of actions created this build just by configured
	// targets. Used mainly to allow consumers of actions_created, which used to
	// not include aspects' actions, to normalize across the Blaze release that
	// switched actions_created to include all created actions.
	ActionsCreatedNotIncludingAspects int64 `protobuf:"varint,3,opt,name=actions_created_not_including_aspects,json=actionsCreatedNotIncludingAspects,proto3" json:"actions_created_not_including_aspects,omitempty"`
	// The total number of actions executed during the build. This includes any
	// remote cache hits, but excludes local action cache hits.
	ActionsExecuted int64 `protobuf:"varint,2,opt,name=actions_executed,json=actionsExecuted,proto3" json:"actions_executed,omitempty"`
	// Contains the top N actions by number of actions executed.
	ActionData []*BuildMetrics_ActionSummary_ActionData `protobuf:"bytes,4,rep,name=action_data,json=actionData,proto3" json:"action_data,omitempty"`
	// Deprecated. The total number of remote cache hits.
	//
	// Deprecated: Do not use.
	RemoteCacheHits int64                                     `protobuf:"varint,5,opt,name=remote_cache_hits,json=remoteCacheHits,proto3" json:"remote_cache_hits,omitempty"`
	RunnerCount     []*BuildMetrics_ActionSummary_RunnerCount `protobuf:"bytes,6,rep,name=runner_count,json=runnerCount,proto3" json:"runner_count,omitempty"`
}

func (x *BuildMetrics_ActionSummary) Reset() {
	*x = BuildMetrics_ActionSummary{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_ActionSummary) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_ActionSummary) ProtoMessage() {}

func (x *BuildMetrics_ActionSummary) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_ActionSummary.ProtoReflect.Descriptor instead.
func (*BuildMetrics_ActionSummary) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 0}
}

func (x *BuildMetrics_ActionSummary) GetActionsCreated() int64 {
	if x != nil {
		return x.ActionsCreated
	}
	return 0
}

func (x *BuildMetrics_ActionSummary) GetActionsCreatedNotIncludingAspects() int64 {
	if x != nil {
		return x.ActionsCreatedNotIncludingAspects
	}
	return 0
}

func (x *BuildMetrics_ActionSummary) GetActionsExecuted() int64 {
	if x != nil {
		return x.ActionsExecuted
	}
	return 0
}

func (x *BuildMetrics_ActionSummary) GetActionData() []*BuildMetrics_ActionSummary_ActionData {
	if x != nil {
		return x.ActionData
	}
	return nil
}

// Deprecated: Do not use.
func (x *BuildMetrics_ActionSummary) GetRemoteCacheHits() int64 {
	if x != nil {
		return x.RemoteCacheHits
	}
	return 0
}

func (x *BuildMetrics_ActionSummary) GetRunnerCount() []*BuildMetrics_ActionSummary_RunnerCount {
	if x != nil {
		return x.RunnerCount
	}
	return nil
}

type BuildMetrics_MemoryMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Size of the JVM heap post build in bytes. This is only collected if
	// --memory_profile is set, since it forces a full GC.
	UsedHeapSizePostBuild int64 `protobuf:"varint,1,opt,name=used_heap_size_post_build,json=usedHeapSizePostBuild,proto3" json:"used_heap_size_post_build,omitempty"`
	// Size of the peak JVM heap size in bytes post GC. Note that this reports 0
	// if there was no major GC during the build.
	PeakPostGcHeapSize int64                                        `protobuf:"varint,2,opt,name=peak_post_gc_heap_size,json=peakPostGcHeapSize,proto3" json:"peak_post_gc_heap_size,omitempty"`
	GarbageMetrics     []*BuildMetrics_MemoryMetrics_GarbageMetrics `protobuf:"bytes,3,rep,name=garbage_metrics,json=garbageMetrics,proto3" json:"garbage_metrics,omitempty"`
}

func (x *BuildMetrics_MemoryMetrics) Reset() {
	*x = BuildMetrics_MemoryMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_MemoryMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_MemoryMetrics) ProtoMessage() {}

func (x *BuildMetrics_MemoryMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_MemoryMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_MemoryMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 1}
}

func (x *BuildMetrics_MemoryMetrics) GetUsedHeapSizePostBuild() int64 {
	if x != nil {
		return x.UsedHeapSizePostBuild
	}
	return 0
}

func (x *BuildMetrics_MemoryMetrics) GetPeakPostGcHeapSize() int64 {
	if x != nil {
		return x.PeakPostGcHeapSize
	}
	return 0
}

func (x *BuildMetrics_MemoryMetrics) GetGarbageMetrics() []*BuildMetrics_MemoryMetrics_GarbageMetrics {
	if x != nil {
		return x.GarbageMetrics
	}
	return nil
}

type BuildMetrics_TargetMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// DEPRECATED
	// No longer populated. It never measured what it was supposed to (targets
	// loaded): it counted targets that were analyzed even if the underlying
	// package had not changed.
	// TODO(janakr): rename and remove.
	TargetsLoaded int64 `protobuf:"varint,1,opt,name=targets_loaded,json=targetsLoaded,proto3" json:"targets_loaded,omitempty"`
	// Number of targets/aspects configured during this build. Does not include
	// targets/aspects that were configured on prior builds on this server and
	// were cached. See BuildGraphMetrics below if you need that.
	TargetsConfigured int64 `protobuf:"varint,2,opt,name=targets_configured,json=targetsConfigured,proto3" json:"targets_configured,omitempty"`
	// Number of configured targets analyzed during this build. Does not include
	// aspects. Used mainly to allow consumers of targets_configured, which used
	// to not include aspects, to normalize across the Blaze release that
	// switched targets_configured to include aspects.
	TargetsConfiguredNotIncludingAspects int64 `protobuf:"varint,3,opt,name=targets_configured_not_including_aspects,json=targetsConfiguredNotIncludingAspects,proto3" json:"targets_configured_not_including_aspects,omitempty"`
}

func (x *BuildMetrics_TargetMetrics) Reset() {
	*x = BuildMetrics_TargetMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_TargetMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_TargetMetrics) ProtoMessage() {}

func (x *BuildMetrics_TargetMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_TargetMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_TargetMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 2}
}

func (x *BuildMetrics_TargetMetrics) GetTargetsLoaded() int64 {
	if x != nil {
		return x.TargetsLoaded
	}
	return 0
}

func (x *BuildMetrics_TargetMetrics) GetTargetsConfigured() int64 {
	if x != nil {
		return x.TargetsConfigured
	}
	return 0
}

func (x *BuildMetrics_TargetMetrics) GetTargetsConfiguredNotIncludingAspects() int64 {
	if x != nil {
		return x.TargetsConfiguredNotIncludingAspects
	}
	return 0
}

type BuildMetrics_PackageMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Number of BUILD files (aka packages) loaded during this build.
	PackagesLoaded int64 `protobuf:"varint,1,opt,name=packages_loaded,json=packagesLoaded,proto3" json:"packages_loaded,omitempty"`
}

func (x *BuildMetrics_PackageMetrics) Reset() {
	*x = BuildMetrics_PackageMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_PackageMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_PackageMetrics) ProtoMessage() {}

func (x *BuildMetrics_PackageMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_PackageMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_PackageMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 3}
}

func (x *BuildMetrics_PackageMetrics) GetPackagesLoaded() int64 {
	if x != nil {
		return x.PackagesLoaded
	}
	return 0
}

type BuildMetrics_TimingMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// The CPU time in milliseconds consumed during this build.
	CpuTimeInMs int64 `protobuf:"varint,1,opt,name=cpu_time_in_ms,json=cpuTimeInMs,proto3" json:"cpu_time_in_ms,omitempty"`
	// The elapsed wall time in milliseconds during this build.
	WallTimeInMs int64 `protobuf:"varint,2,opt,name=wall_time_in_ms,json=wallTimeInMs,proto3" json:"wall_time_in_ms,omitempty"`
	// The elapsed wall time in milliseconds during the analysis phase.
	AnalysisPhaseTimeInMs int64 `protobuf:"varint,3,opt,name=analysis_phase_time_in_ms,json=analysisPhaseTimeInMs,proto3" json:"analysis_phase_time_in_ms,omitempty"`
}

func (x *BuildMetrics_TimingMetrics) Reset() {
	*x = BuildMetrics_TimingMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_TimingMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_TimingMetrics) ProtoMessage() {}

func (x *BuildMetrics_TimingMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_TimingMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_TimingMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 4}
}

func (x *BuildMetrics_TimingMetrics) GetCpuTimeInMs() int64 {
	if x != nil {
		return x.CpuTimeInMs
	}
	return 0
}

func (x *BuildMetrics_TimingMetrics) GetWallTimeInMs() int64 {
	if x != nil {
		return x.WallTimeInMs
	}
	return 0
}

func (x *BuildMetrics_TimingMetrics) GetAnalysisPhaseTimeInMs() int64 {
	if x != nil {
		return x.AnalysisPhaseTimeInMs
	}
	return 0
}

type BuildMetrics_CumulativeMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// One-indexed number of "analyses" the server has run, including the
	// current one. Will be incremented for every build/test/cquery/etc. command
	// that reaches the analysis phase.
	NumAnalyses int32 `protobuf:"varint,11,opt,name=num_analyses,json=numAnalyses,proto3" json:"num_analyses,omitempty"`
	// One-indexed number of "builds" the server has run, including the current
	// one. Will be incremented for every build/test/run/etc. command that
	// reaches the execution phase.
	NumBuilds int32 `protobuf:"varint,12,opt,name=num_builds,json=numBuilds,proto3" json:"num_builds,omitempty"`
}

func (x *BuildMetrics_CumulativeMetrics) Reset() {
	*x = BuildMetrics_CumulativeMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_CumulativeMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_CumulativeMetrics) ProtoMessage() {}

func (x *BuildMetrics_CumulativeMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_CumulativeMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_CumulativeMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 5}
}

func (x *BuildMetrics_CumulativeMetrics) GetNumAnalyses() int32 {
	if x != nil {
		return x.NumAnalyses
	}
	return 0
}

func (x *BuildMetrics_CumulativeMetrics) GetNumBuilds() int32 {
	if x != nil {
		return x.NumBuilds
	}
	return 0
}

type BuildMetrics_ArtifactMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Measures all source files newly read this build. Does not include
	// unchanged sources on incremental builds.
	SourceArtifactsRead *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,2,opt,name=source_artifacts_read,json=sourceArtifactsRead,proto3" json:"source_artifacts_read,omitempty"`
	// Measures all output artifacts from executed actions. This includes
	// actions that were cached locally (via the action cache) or remotely (via
	// a remote cache or executor), but does *not* include outputs of actions
	// that were cached internally in Skyframe.
	OutputArtifactsSeen *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,3,opt,name=output_artifacts_seen,json=outputArtifactsSeen,proto3" json:"output_artifacts_seen,omitempty"`
	// Measures all output artifacts from actions that were cached locally
	// via the action cache. These artifacts were already present on disk at the
	// start of the build. Does not include Skyframe-cached actions' outputs.
	OutputArtifactsFromActionCache *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,4,opt,name=output_artifacts_from_action_cache,json=outputArtifactsFromActionCache,proto3" json:"output_artifacts_from_action_cache,omitempty"`
	// Measures all artifacts that belong to a top-level output group. Does not
	// deduplicate, so if there are two top-level targets in this build that
	// share an artifact, it will be counted twice.
	TopLevelArtifacts *BuildMetrics_ArtifactMetrics_FilesMetric `protobuf:"bytes,5,opt,name=top_level_artifacts,json=topLevelArtifacts,proto3" json:"top_level_artifacts,omitempty"`
}

func (x *BuildMetrics_ArtifactMetrics) Reset() {
	*x = BuildMetrics_ArtifactMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_ArtifactMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_ArtifactMetrics) ProtoMessage() {}

func (x *BuildMetrics_ArtifactMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_ArtifactMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_ArtifactMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 6}
}

func (x *BuildMetrics_ArtifactMetrics) GetSourceArtifactsRead() *BuildMetrics_ArtifactMetrics_FilesMetric {
	if x != nil {
		return x.SourceArtifactsRead
	}
	return nil
}

func (x *BuildMetrics_ArtifactMetrics) GetOutputArtifactsSeen() *BuildMetrics_ArtifactMetrics_FilesMetric {
	if x != nil {
		return x.OutputArtifactsSeen
	}
	return nil
}

func (x *BuildMetrics_ArtifactMetrics) GetOutputArtifactsFromActionCache() *BuildMetrics_ArtifactMetrics_FilesMetric {
	if x != nil {
		return x.OutputArtifactsFromActionCache
	}
	return nil
}

func (x *BuildMetrics_ArtifactMetrics) GetTopLevelArtifacts() *BuildMetrics_ArtifactMetrics_FilesMetric {
	if x != nil {
		return x.TopLevelArtifacts
	}
	return nil
}

// Information about the size and shape of the build graph. Some fields may
// not be populated if Bazel was able to skip steps due to caching.
type BuildMetrics_BuildGraphMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// How many configured targets/aspects were in this build, including any
	// that were analyzed on a prior build and are still valid. May not be
	// populated if analysis phase was fully cached. Note: for historical
	// reasons this includes input/output files and other configured targets
	// that do not actually have associated actions.
	ActionLookupValueCount int32 `protobuf:"varint,1,opt,name=action_lookup_value_count,json=actionLookupValueCount,proto3" json:"action_lookup_value_count,omitempty"`
	// How many configured targets alone were in this build: always at most
	// action_lookup_value_count. Useful mainly for historical comparisons to
	// TargetMetrics.targets_configured, which used to not count aspects. This
	// also includes configured targets that do not have associated actions.
	ActionLookupValueCountNotIncludingAspects int32 `protobuf:"varint,5,opt,name=action_lookup_value_count_not_including_aspects,json=actionLookupValueCountNotIncludingAspects,proto3" json:"action_lookup_value_count_not_including_aspects,omitempty"`
	// How many actions belonged to the configured targets/aspects above. It may
	// not be necessary to execute all of these actions to build the requested
	// targets. May not be populated if analysis phase was fully cached.
	ActionCount int32 `protobuf:"varint,2,opt,name=action_count,json=actionCount,proto3" json:"action_count,omitempty"`
	// How many actions belonged to configured targets: always at most
	// action_count. Useful mainly for historical comparisons to
	// ActionMetrics.actions_created, which used to not count aspects' actions.
	ActionCountNotIncludingAspects int32 `protobuf:"varint,6,opt,name=action_count_not_including_aspects,json=actionCountNotIncludingAspects,proto3" json:"action_count_not_including_aspects,omitempty"`
	// How many "input file" configured targets there were: one per source file.
	// Should agree with artifact_metrics.source_artifacts_read.count above,
	InputFileConfiguredTargetCount int32 `protobuf:"varint,7,opt,name=input_file_configured_target_count,json=inputFileConfiguredTargetCount,proto3" json:"input_file_configured_target_count,omitempty"`
	// How many "output file" configured targets there were: output files that
	// are targets (not implicit outputs).
	OutputFileConfiguredTargetCount int32 `protobuf:"varint,8,opt,name=output_file_configured_target_count,json=outputFileConfiguredTargetCount,proto3" json:"output_file_configured_target_count,omitempty"`
	// How many "other" configured targets there were (like alias,
	// package_group, and other non-rule non-file configured targets).
	OtherConfiguredTargetCount int32 `protobuf:"varint,9,opt,name=other_configured_target_count,json=otherConfiguredTargetCount,proto3" json:"other_configured_target_count,omitempty"`
	// How many artifacts are outputs of the above actions. May not be populated
	// if analysis phase was fully cached.
	OutputArtifactCount int32 `protobuf:"varint,3,opt,name=output_artifact_count,json=outputArtifactCount,proto3" json:"output_artifact_count,omitempty"`
	// How many Skyframe nodes there are in memory at the end of the build. This
	// may underestimate the number of nodes when running with memory-saving
	// settings or with Skybuild, and may overestimate if there are nodes from
	// prior evaluations still in the cache.
	PostInvocationSkyframeNodeCount int32 `protobuf:"varint,4,opt,name=post_invocation_skyframe_node_count,json=postInvocationSkyframeNodeCount,proto3" json:"post_invocation_skyframe_node_count,omitempty"`
}

func (x *BuildMetrics_BuildGraphMetrics) Reset() {
	*x = BuildMetrics_BuildGraphMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_BuildGraphMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_BuildGraphMetrics) ProtoMessage() {}

func (x *BuildMetrics_BuildGraphMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_BuildGraphMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_BuildGraphMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 7}
}

func (x *BuildMetrics_BuildGraphMetrics) GetActionLookupValueCount() int32 {
	if x != nil {
		return x.ActionLookupValueCount
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetActionLookupValueCountNotIncludingAspects() int32 {
	if x != nil {
		return x.ActionLookupValueCountNotIncludingAspects
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetActionCount() int32 {
	if x != nil {
		return x.ActionCount
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetActionCountNotIncludingAspects() int32 {
	if x != nil {
		return x.ActionCountNotIncludingAspects
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetInputFileConfiguredTargetCount() int32 {
	if x != nil {
		return x.InputFileConfiguredTargetCount
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetOutputFileConfiguredTargetCount() int32 {
	if x != nil {
		return x.OutputFileConfiguredTargetCount
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetOtherConfiguredTargetCount() int32 {
	if x != nil {
		return x.OtherConfiguredTargetCount
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetOutputArtifactCount() int32 {
	if x != nil {
		return x.OutputArtifactCount
	}
	return 0
}

func (x *BuildMetrics_BuildGraphMetrics) GetPostInvocationSkyframeNodeCount() int32 {
	if x != nil {
		return x.PostInvocationSkyframeNodeCount
	}
	return 0
}

// Information about all workers that were alive during the invocation.
type BuildMetrics_WorkerMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Unique id of worker.
	WorkerId int32 `protobuf:"varint,1,opt,name=worker_id,json=workerId,proto3" json:"worker_id,omitempty"`
	// Worker process id. If there is no process for worker, equals to zero.
	ProcessId uint32 `protobuf:"varint,2,opt,name=process_id,json=processId,proto3" json:"process_id,omitempty"`
	// Mnemonic of running worker.
	Mnemonic string `protobuf:"bytes,3,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// Multiplex or singleplex worker.
	IsMultiplex bool `protobuf:"varint,4,opt,name=is_multiplex,json=isMultiplex,proto3" json:"is_multiplex,omitempty"`
	// Using worker sandbox file system or not.
	IsSandbox bool `protobuf:"varint,5,opt,name=is_sandbox,json=isSandbox,proto3" json:"is_sandbox,omitempty"`
	// Shows is worker stats measured at the end of invocation.
	IsMeasurable bool `protobuf:"varint,6,opt,name=is_measurable,json=isMeasurable,proto3" json:"is_measurable,omitempty"`
	// Combined workers statistics.
	WorkerStats []*BuildMetrics_WorkerMetrics_WorkerStats `protobuf:"bytes,7,rep,name=worker_stats,json=workerStats,proto3" json:"worker_stats,omitempty"`
}

func (x *BuildMetrics_WorkerMetrics) Reset() {
	*x = BuildMetrics_WorkerMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_WorkerMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_WorkerMetrics) ProtoMessage() {}

func (x *BuildMetrics_WorkerMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_WorkerMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_WorkerMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 8}
}

func (x *BuildMetrics_WorkerMetrics) GetWorkerId() int32 {
	if x != nil {
		return x.WorkerId
	}
	return 0
}

func (x *BuildMetrics_WorkerMetrics) GetProcessId() uint32 {
	if x != nil {
		return x.ProcessId
	}
	return 0
}

func (x *BuildMetrics_WorkerMetrics) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *BuildMetrics_WorkerMetrics) GetIsMultiplex() bool {
	if x != nil {
		return x.IsMultiplex
	}
	return false
}

func (x *BuildMetrics_WorkerMetrics) GetIsSandbox() bool {
	if x != nil {
		return x.IsSandbox
	}
	return false
}

func (x *BuildMetrics_WorkerMetrics) GetIsMeasurable() bool {
	if x != nil {
		return x.IsMeasurable
	}
	return false
}

func (x *BuildMetrics_WorkerMetrics) GetWorkerStats() []*BuildMetrics_WorkerMetrics_WorkerStats {
	if x != nil {
		return x.WorkerStats
	}
	return nil
}

type BuildMetrics_ActionSummary_ActionData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Mnemonic string `protobuf:"bytes,1,opt,name=mnemonic,proto3" json:"mnemonic,omitempty"`
	// The total number of actions of this type executed during the build. As
	// above, includes remote cache hits but excludes local action cache hits.
	ActionsExecuted int64 `protobuf:"varint,2,opt,name=actions_executed,json=actionsExecuted,proto3" json:"actions_executed,omitempty"`
	// When the first action of this type started being executed, in
	// milliseconds from the epoch.
	FirstStartedMs int64 `protobuf:"varint,3,opt,name=first_started_ms,json=firstStartedMs,proto3" json:"first_started_ms,omitempty"`
	// When the last action of this type ended being executed, in
	// milliseconds from the epoch.
	LastEndedMs int64 `protobuf:"varint,4,opt,name=last_ended_ms,json=lastEndedMs,proto3" json:"last_ended_ms,omitempty"`
}

func (x *BuildMetrics_ActionSummary_ActionData) Reset() {
	*x = BuildMetrics_ActionSummary_ActionData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_ActionSummary_ActionData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_ActionSummary_ActionData) ProtoMessage() {}

func (x *BuildMetrics_ActionSummary_ActionData) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_ActionSummary_ActionData.ProtoReflect.Descriptor instead.
func (*BuildMetrics_ActionSummary_ActionData) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 0, 0}
}

func (x *BuildMetrics_ActionSummary_ActionData) GetMnemonic() string {
	if x != nil {
		return x.Mnemonic
	}
	return ""
}

func (x *BuildMetrics_ActionSummary_ActionData) GetActionsExecuted() int64 {
	if x != nil {
		return x.ActionsExecuted
	}
	return 0
}

func (x *BuildMetrics_ActionSummary_ActionData) GetFirstStartedMs() int64 {
	if x != nil {
		return x.FirstStartedMs
	}
	return 0
}

func (x *BuildMetrics_ActionSummary_ActionData) GetLastEndedMs() int64 {
	if x != nil {
		return x.LastEndedMs
	}
	return 0
}

type BuildMetrics_ActionSummary_RunnerCount struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Count int32  `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BuildMetrics_ActionSummary_RunnerCount) Reset() {
	*x = BuildMetrics_ActionSummary_RunnerCount{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_ActionSummary_RunnerCount) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_ActionSummary_RunnerCount) ProtoMessage() {}

func (x *BuildMetrics_ActionSummary_RunnerCount) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_ActionSummary_RunnerCount.ProtoReflect.Descriptor instead.
func (*BuildMetrics_ActionSummary_RunnerCount) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 0, 1}
}

func (x *BuildMetrics_ActionSummary_RunnerCount) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BuildMetrics_ActionSummary_RunnerCount) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

type BuildMetrics_MemoryMetrics_GarbageMetrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type of garbage collected, e.g. G1 Old Gen.
	Type string `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	// Number of bytes of garbage of the given type collected during this
	// invocation.
	GarbageCollected int64 `protobuf:"varint,2,opt,name=garbage_collected,json=garbageCollected,proto3" json:"garbage_collected,omitempty"`
}

func (x *BuildMetrics_MemoryMetrics_GarbageMetrics) Reset() {
	*x = BuildMetrics_MemoryMetrics_GarbageMetrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_MemoryMetrics_GarbageMetrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_MemoryMetrics_GarbageMetrics) ProtoMessage() {}

func (x *BuildMetrics_MemoryMetrics_GarbageMetrics) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_MemoryMetrics_GarbageMetrics.ProtoReflect.Descriptor instead.
func (*BuildMetrics_MemoryMetrics_GarbageMetrics) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 1, 0}
}

func (x *BuildMetrics_MemoryMetrics_GarbageMetrics) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *BuildMetrics_MemoryMetrics_GarbageMetrics) GetGarbageCollected() int64 {
	if x != nil {
		return x.GarbageCollected
	}
	return 0
}

type BuildMetrics_ArtifactMetrics_FilesMetric struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SizeInBytes int64 `protobuf:"varint,1,opt,name=size_in_bytes,json=sizeInBytes,proto3" json:"size_in_bytes,omitempty"`
	Count       int32 `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *BuildMetrics_ArtifactMetrics_FilesMetric) Reset() {
	*x = BuildMetrics_ArtifactMetrics_FilesMetric{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_ArtifactMetrics_FilesMetric) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_ArtifactMetrics_FilesMetric) ProtoMessage() {}

func (x *BuildMetrics_ArtifactMetrics_FilesMetric) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_ArtifactMetrics_FilesMetric.ProtoReflect.Descriptor instead.
func (*BuildMetrics_ArtifactMetrics_FilesMetric) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 6, 0}
}

func (x *BuildMetrics_ArtifactMetrics_FilesMetric) GetSizeInBytes() int64 {
	if x != nil {
		return x.SizeInBytes
	}
	return 0
}

func (x *BuildMetrics_ArtifactMetrics_FilesMetric) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

// Information collected from worker at some point.
type BuildMetrics_WorkerMetrics_WorkerStats struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Epoch unix time of collection of metrics.
	CollectTimeInMs int64 `protobuf:"varint,1,opt,name=collect_time_in_ms,json=collectTimeInMs,proto3" json:"collect_time_in_ms,omitempty"`
	// RSS size of worker process.
	WorkerMemoryInKb int32 `protobuf:"varint,2,opt,name=worker_memory_in_kb,json=workerMemoryInKb,proto3" json:"worker_memory_in_kb,omitempty"`
}

func (x *BuildMetrics_WorkerMetrics_WorkerStats) Reset() {
	*x = BuildMetrics_WorkerMetrics_WorkerStats{}
	if protoimpl.UnsafeEnabled {
		mi := &file_build_event_stream_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BuildMetrics_WorkerMetrics_WorkerStats) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BuildMetrics_WorkerMetrics_WorkerStats) ProtoMessage() {}

func (x *BuildMetrics_WorkerMetrics_WorkerStats) ProtoReflect() protoreflect.Message {
	mi := &file_build_event_stream_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BuildMetrics_WorkerMetrics_WorkerStats.ProtoReflect.Descriptor instead.
func (*BuildMetrics_WorkerMetrics_WorkerStats) Descriptor() ([]byte, []int) {
	return file_build_event_stream_proto_rawDescGZIP(), []int{22, 8, 0}
}

func (x *BuildMetrics_WorkerMetrics_WorkerStats) GetCollectTimeInMs() int64 {
	if x != nil {
		return x.CollectTimeInMs
	}
	return 0
}

func (x *BuildMetrics_WorkerMetrics_WorkerStats) GetWorkerMemoryInKb() int32 {
	if x != nil {
		return x.WorkerMemoryInKb
	}
	return 0
}

var File_build_event_stream_proto protoreflect.FileDescriptor

var file_build_event_stream_proto_rawDesc = []byte{
	0x0a, 0x18, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x1a, 0x1e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17, 0x69, 0x6e, 0x76, 0x6f,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x97, 0x1f, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x12, 0x50, 0x0a, 0x07, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x75,
	0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x12, 0x49, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72,
	0x65, 0x73, 0x73, 0x49, 0x64, 0x48, 0x00, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73,
	0x73, 0x12, 0x4b, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x49, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x49, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x78,
	0x0a, 0x19, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x17, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d,
	0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x72, 0x0a, 0x17, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c,
	0x69, 0x6e, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x53, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e,
	0x65, 0x49, 0x64, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x5f, 0x0a, 0x10,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x77, 0x6f,
	0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x59, 0x0a,
	0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x64, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x40, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x12, 0x58, 0x0a, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x62, 0x0a, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x33, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x65, 0x64, 0x49, 0x64, 0x48, 0x00, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x49, 0x64, 0x48, 0x00, 0x52,
	0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x5d, 0x0a, 0x0f, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x12, 0x51, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x64,
	0x5f, 0x73, 0x65, 0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x08, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x74, 0x12, 0x5f, 0x0a, 0x10, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x5f, 0x0a, 0x10, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x65, 0x0a, 0x12,
	0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x55, 0x6e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x48, 0x00,
	0x52, 0x11, 0x75, 0x6e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x5f, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x64, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x50, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x53, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x54,
	0x65, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0b,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x0e, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x59, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x5a, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f,
	0x6c, 0x6f, 0x67, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0d,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x56, 0x0a,
	0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x16,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x52, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x64, 0x48, 0x00, 0x52, 0x09,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x59, 0x0a, 0x0e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x18, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x49, 0x64, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x8a, 0x01, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69,
	0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x6c,
	0x69, 0x6e, 0x6b, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x64,
	0x48, 0x00, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53,
	0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x64, 0x1a, 0x2f, 0x0a, 0x13, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x73, 0x1a, 0x2f, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x49, 0x64,
	0x12, 0x21, 0x0a, 0x0c, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6f, 0x70, 0x61, 0x71, 0x75, 0x65, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x1a, 0x10, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x1a, 0x1b, 0x0a, 0x19, 0x55, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x49, 0x64, 0x1a, 0x47, 0x0a, 0x17, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x49, 0x64, 0x12, 0x2c, 0x0a,
	0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x6d, 0x61,
	0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x13, 0x0a, 0x11, 0x57,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x49, 0x64,
	0x1a, 0x11, 0x0a, 0x0f, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x64, 0x49, 0x64, 0x1a, 0x1b, 0x0a, 0x07, 0x46, 0x65, 0x74, 0x63, 0x68, 0x49, 0x64, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x1a, 0x2d, 0x0a, 0x11, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x1a,
	0x13, 0x0a, 0x11, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x49, 0x64, 0x1a, 0x11, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x1a, 0x42, 0x0a, 0x12, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x1a, 0x23, 0x0a, 0x11, 0x4e,
	0x61, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x64,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x1a, 0x21, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x02, 0x69, 0x64, 0x1a, 0x99, 0x01, 0x0a, 0x11, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x12,
	0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x73, 0x70, 0x65, 0x63,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x1a,
	0xa8, 0x01, 0x0a, 0x11, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79,
	0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x2b, 0x0a, 0x13, 0x55, 0x6e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x1a, 0x81, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0xbe, 0x01, 0x0a, 0x0c,
	0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x75,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x72, 0x75, 0x6e, 0x12, 0x14, 0x0a, 0x05,
	0x73, 0x68, 0x61, 0x72, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x68, 0x61,
	0x72, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x1a, 0x7d, 0x0a, 0x0d,
	0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x7f, 0x0a, 0x0f, 0x54,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x49, 0x64, 0x12, 0x14,
	0x0a, 0x05, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x12, 0x56, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x11, 0x0a, 0x0f,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x49, 0x64, 0x1a,
	0x11, 0x0a, 0x0f, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x73,
	0x49, 0x64, 0x1a, 0x10, 0x0a, 0x0e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x49, 0x64, 0x1a, 0x21, 0x0a, 0x1f, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65,
	0x6e, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x64, 0x49, 0x64, 0x42, 0x04, 0x0a, 0x02, 0x69, 0x64, 0x22, 0x3a, 0x0a,
	0x08, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64,
	0x6f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x22, 0xd4, 0x02, 0x0a, 0x07, 0x41, 0x62,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x2e, 0x41, 0x62, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x06,
	0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x0b, 0x41, 0x62, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x14, 0x0a, 0x10, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x4e,
	0x4f, 0x5f, 0x41, 0x4e, 0x41, 0x4c, 0x59, 0x5a, 0x45, 0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x4e,
	0x4f, 0x5f, 0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x09, 0x12, 0x0c, 0x0a, 0x08, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x4f, 0x55, 0x54, 0x10, 0x02, 0x12, 0x1e, 0x0a, 0x1a, 0x52, 0x45, 0x4d, 0x4f, 0x54,
	0x45, 0x5f, 0x45, 0x4e, 0x56, 0x49, 0x52, 0x4f, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x41,
	0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x4e, 0x41, 0x4c, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x4c, 0x4f, 0x41, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x4e,
	0x41, 0x4c, 0x59, 0x53, 0x49, 0x53, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x06,
	0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4b, 0x49, 0x50, 0x50, 0x45, 0x44, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x0a, 0x12, 0x11, 0x0a,
	0x0d, 0x4f, 0x55, 0x54, 0x5f, 0x4f, 0x46, 0x5f, 0x4d, 0x45, 0x4d, 0x4f, 0x52, 0x59, 0x10, 0x0b,
	0x22, 0x83, 0x03, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x75, 0x75, 0x69, 0x64, 0x12, 0x2e, 0x0a, 0x11, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x4d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x2c, 0x0a, 0x12, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2f,
	0x0a, 0x13, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2b, 0x0a, 0x11, 0x77, 0x6f, 0x72,
	0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x69, 0x6e, 0x67, 0x44, 0x69, 0x72,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x2f, 0x0a, 0x13, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x5f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x44, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x70, 0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x50, 0x69, 0x64, 0x22, 0x39, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x0f, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x5f, 0x65, 0x78, 0x65, 0x63, 0x5f, 0x72, 0x6f, 0x6f, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x45, 0x78, 0x65, 0x63, 0x52, 0x6f, 0x6f,
	0x74, 0x22, 0x2d, 0x0a, 0x17, 0x55, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65,
	0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x12, 0x0a, 0x04,
	0x61, 0x72, 0x67, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x04, 0x61, 0x72, 0x67, 0x73,
	0x22, 0xac, 0x02, 0x0a, 0x0d, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0e, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x75, 0x70, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x38, 0x0a, 0x18, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x5f,
	0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x16, 0x65,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x75, 0x70, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x69, 0x6e,
	0x65, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x2a, 0x0a, 0x11, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x5f, 0x63, 0x6d, 0x64,
	0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x65, 0x78, 0x70,
	0x6c, 0x69, 0x63, 0x69, 0x74, 0x43, 0x6d, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x56, 0x0a, 0x11,
	0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x62, 0x6c, 0x61, 0x7a, 0x65, 0x2e,
	0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x70, 0x6f, 0x6c, 0x69, 0x63,
	0x79, 0x2e, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x52, 0x10, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f,
	0x6c, 0x69, 0x63, 0x79, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x6f, 0x6f, 0x6c, 0x5f, 0x74, 0x61, 0x67,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x6f, 0x6f, 0x6c, 0x54, 0x61, 0x67, 0x22,
	0x21, 0x0a, 0x05, 0x46, 0x65, 0x74, 0x63, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x22, 0x7f, 0x0a, 0x0f, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x69, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61,
	0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x52, 0x04, 0x69,
	0x74, 0x65, 0x6d, 0x1a, 0x2e, 0x0a, 0x04, 0x49, 0x74, 0x65, 0x6d, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x4b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xfd, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x23, 0x0a,
	0x0d, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x63, 0x70, 0x75, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x63, 0x70, 0x75, 0x12, 0x58, 0x0a, 0x0d, 0x6d, 0x61, 0x6b, 0x65, 0x5f, 0x76, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d,
	0x61, 0x6b, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0c, 0x6d, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x1a, 0x3f,
	0x0a, 0x11, 0x4d, 0x61, 0x6b, 0x65, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22,
	0xd5, 0x01, 0x0a, 0x0f, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x12, 0x6a, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x5f, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x36, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45,
	0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74,
	0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x61, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x56, 0x0a, 0x12, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x69, 0x74, 0x65, 0x45, 0x78, 0x70, 0x61,
	0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x69, 0x74, 0x65, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x75, 0x69, 0x74,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x74, 0x65, 0x73,
	0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x22, 0x80, 0x01, 0x0a, 0x10, 0x54, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x39, 0x0a,
	0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x52, 0x08,
	0x74, 0x65, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x22, 0xa5, 0x01, 0x0a, 0x04, 0x46,
	0x69, 0x6c, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x72, 0x65, 0x66,
	0x69, 0x78, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x74, 0x68, 0x50, 0x72,
	0x65, 0x66, 0x69, 0x78, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x03, 0x75, 0x72, 0x69, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x03, 0x75, 0x72, 0x69, 0x12, 0x1c, 0x0a, 0x08,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00,
	0x52, 0x08, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x66, 0x69,
	0x6c, 0x65, 0x22, 0x92, 0x01, 0x0a, 0x0f, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f,
	0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x2e, 0x0a, 0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x05, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x4f, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49, 0x64, 0x52, 0x08, 0x66,
	0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x22, 0xac, 0x04, 0x0a, 0x0e, 0x41, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74,
	0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52,
	0x06, 0x73, 0x74, 0x64, 0x6f, 0x75, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x06, 0x73, 0x74, 0x64, 0x65, 0x72, 0x72, 0x12, 0x18, 0x0a, 0x05, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x05, 0x6c, 0x61,
	0x62, 0x65, 0x6c, 0x12, 0x5a, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x3f, 0x0a, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x12, 0x21, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c,
	0x69, 0x6e, 0x65, 0x12, 0x4a, 0x0a, 0x14, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x12, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x4c, 0x6f, 0x67, 0x73, 0x12,
	0x45, 0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72,
	0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65,
	0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x22, 0x98, 0x01, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x4f, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x73, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x49,
	0x64, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69,
	0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0a, 0x69, 0x6e, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4a, 0x04, 0x08, 0x02, 0x10,
	0x03, 0x22, 0xad, 0x04, 0x0a, 0x0e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70,
	0x6c, 0x65, 0x74, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x23,
	0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x69, 0x7a, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x08, 0x74, 0x65, 0x73, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x12, 0x42, 0x0a, 0x0c, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x47, 0x0a, 0x10, 0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74,
	0x61, 0x6e, 0x74, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f,
	0x69, 0x6d, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6e, 0x74, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12,
	0x43, 0x0a, 0x10, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x5f, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46,
	0x69, 0x6c, 0x65, 0x52, 0x0f, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x34, 0x0a, 0x14, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x12, 0x74, 0x65, 0x73, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x12, 0x3c, 0x0a, 0x0c,
	0x74, 0x65, 0x73, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x74,
	0x65, 0x73, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x45, 0x0a, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x64, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x73, 0x2e, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69,
	0x6c, 0x22, 0x8b, 0x0a, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x36, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x5f, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x12,
	0x25, 0x0a, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x6c,
	0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x6c, 0x79, 0x12, 0x48, 0x0a, 0x1f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x69, 0x6c,
	0x6c, 0x69, 0x73, 0x5f, 0x65, 0x70, 0x6f, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x1b, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x45, 0x70, 0x6f, 0x63, 0x68,
	0x12, 0x48, 0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x1c, 0x74, 0x65,
	0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x19, 0x74, 0x65, 0x73, 0x74, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12,
	0x4d, 0x0a, 0x15, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f,
	0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x13, 0x74, 0x65, 0x73, 0x74, 0x41,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x46,
	0x0a, 0x12, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x10, 0x74, 0x65, 0x73, 0x74, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e,
	0x67, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x77, 0x61, 0x72, 0x6e, 0x69, 0x6e, 0x67,
	0x12, 0x53, 0x0a, 0x0e, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x1a, 0x91, 0x05, 0x0a, 0x0d, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x2b, 0x0a, 0x0f, 0x74, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x5f, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x27, 0x0a, 0x0f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x6c, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x64, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x6c, 0x79, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x78, 0x69,
	0x74, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x65, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x67, 0x0a, 0x10, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x72, 0x65,
	0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65,
	0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x54, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52, 0x0f, 0x74, 0x69, 0x6d, 0x69,
	0x6e, 0x67, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x12, 0x61, 0x0a, 0x0e, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66,
	0x6f, 0x2e, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x0d, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x1a, 0xcd,
	0x01, 0x0a, 0x0f, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f,
	0x77, 0x6e, 0x12, 0x52, 0x0a, 0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x2e,
	0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x64, 0x6f, 0x77, 0x6e, 0x52,
	0x05, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x0b, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12,
	0x2d, 0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x1a, 0x39,
	0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x55, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x22,
	0xef, 0x05, 0x0a, 0x0b, 0x54, 0x65, 0x73, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0d, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x26, 0x0a, 0x0f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x75, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x72, 0x75, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x61,
	0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x72, 0x64, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x73, 0x68, 0x61, 0x72, 0x64, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x30, 0x0a, 0x06, 0x70, 0x61, 0x73, 0x73, 0x65, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x70, 0x61, 0x73,
	0x73, 0x65, 0x64, 0x12, 0x30, 0x0a, 0x06, 0x66, 0x61, 0x69, 0x6c, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x06, 0x66,
	0x61, 0x69, 0x6c, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x6e,
	0x75, 0x6d, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x43, 0x61, 0x63, 0x68, 0x65, 0x64, 0x12,
	0x39, 0x0a, 0x17, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03,
	0x42, 0x02, 0x18, 0x01, 0x52, 0x14, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x44, 0x0a, 0x10, 0x66, 0x69,
	0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x35, 0x0a, 0x15, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x5f, 0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x02, 0x18, 0x01, 0x52, 0x12, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d,
	0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x40, 0x0a, 0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f,
	0x73, 0x74, 0x6f, 0x70, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0c, 0x6c, 0x61, 0x73,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x19, 0x74, 0x6f, 0x74,
	0x61, 0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x6d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01,
	0x52, 0x16, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x12, 0x47, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x5f, 0x72, 0x75, 0x6e, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x10, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0x93, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x12, 0x32, 0x0a, 0x15, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x4e, 0x0a, 0x13, 0x6f, 0x76, 0x65, 0x72, 0x61,
	0x6c, 0x6c, 0x5f, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x11, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x54, 0x65, 0x73,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xba, 0x03, 0x0a, 0x0d, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x2b, 0x0a, 0x0f, 0x6f, 0x76, 0x65,
	0x72, 0x61, 0x6c, 0x6c, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0e, 0x6f, 0x76, 0x65, 0x72, 0x61, 0x6c, 0x6c, 0x53,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x65, 0x78, 0x69, 0x74, 0x5f, 0x63,
	0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x62, 0x75, 0x69, 0x6c,
	0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42,
	0x75, 0x69, 0x6c, 0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2e, 0x45, 0x78, 0x69,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x08, 0x65, 0x78, 0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x30, 0x0a, 0x12, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6d,
	0x69, 0x6c, 0x6c, 0x69, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52,
	0x10, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x12, 0x3b, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x5a,
	0x0a, 0x0e, 0x61, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x5f, 0x72, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x2e, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c,
	0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0d, 0x61, 0x6e, 0x6f,
	0x6d, 0x61, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x1a, 0x32, 0x0a, 0x08, 0x45, 0x78,
	0x69, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x1a, 0x34,
	0x0a, 0x0d, 0x41, 0x6e, 0x6f, 0x6d, 0x61, 0x6c, 0x79, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x23, 0x0a, 0x0d, 0x77, 0x61, 0x73, 0x5f, 0x73, 0x75, 0x73, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x77, 0x61, 0x73, 0x53, 0x75, 0x73, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x64, 0x22, 0xc2, 0x1e, 0x0a, 0x0c, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x52, 0x0d, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x55, 0x0a, 0x0e,
	0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x6d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x58, 0x0a, 0x0f, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x52, 0x0e, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74,
	0x72, 0x69, 0x63, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x74, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x54,
	0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x74, 0x69,
	0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x61, 0x0a, 0x12, 0x63,
	0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x11, 0x63, 0x75, 0x6d,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x5b,
	0x0a, 0x10, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x62, 0x0a, 0x13, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x67, 0x72, 0x61, 0x70, 0x68, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75,
	0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x11, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x55, 0x0a, 0x0e, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0xfd, 0x04, 0x0a, 0x0d, 0x41, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x12, 0x50, 0x0a, 0x25, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x64, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x21, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x4e, 0x6f, 0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x70, 0x65,
	0x63, 0x74, 0x73, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x65,
	0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12, 0x5a,
	0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d,
	0x61, 0x72, 0x79, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0a,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2e, 0x0a, 0x11, 0x72, 0x65,
	0x6d, 0x6f, 0x74, 0x65, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x68, 0x69, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x02, 0x18, 0x01, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x61, 0x63, 0x68, 0x65, 0x48, 0x69, 0x74, 0x73, 0x12, 0x5d, 0x0a, 0x0c, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x2e, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x0b, 0x72, 0x75,
	0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xa1, 0x01, 0x0a, 0x0a, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x6d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x12, 0x29, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f,
	0x65, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x12,
	0x28, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x66, 0x69, 0x72, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x4d, 0x73, 0x12, 0x22, 0x0a, 0x0d, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x65, 0x6e, 0x64, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6e, 0x64, 0x65, 0x64, 0x4d, 0x73, 0x1a, 0x37, 0x0a,
	0x0b, 0x52, 0x75, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0xb8, 0x02, 0x0a, 0x0d, 0x4d, 0x65, 0x6d, 0x6f, 0x72,
	0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x75, 0x73, 0x65, 0x64,
	0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x75, 0x73, 0x65,
	0x64, 0x48, 0x65, 0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x50, 0x6f, 0x73, 0x74, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x32, 0x0a, 0x16, 0x70, 0x65, 0x61, 0x6b, 0x5f, 0x70, 0x6f, 0x73, 0x74, 0x5f,
	0x67, 0x63, 0x5f, 0x68, 0x65, 0x61, 0x70, 0x5f, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x12, 0x70, 0x65, 0x61, 0x6b, 0x50, 0x6f, 0x73, 0x74, 0x47, 0x63, 0x48, 0x65,
	0x61, 0x70, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x66, 0x0a, 0x0f, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67,
	0x65, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x3d, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x2e, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e,
	0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x52, 0x0e,
	0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x1a, 0x51,
	0x0a, 0x0e, 0x47, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x2b, 0x0a, 0x11, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x5f,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x10, 0x67, 0x61, 0x72, 0x62, 0x61, 0x67, 0x65, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x65,
	0x64, 0x1a, 0xbd, 0x01, 0x0a, 0x0d, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x6c,
	0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x12, 0x2d, 0x0a, 0x12, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x11, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x73, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x28, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f,
	0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73,
	0x70, 0x65, 0x63, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x24, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x4e, 0x6f,
	0x74, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74,
	0x73, 0x1a, 0x39, 0x0a, 0x0e, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x72,
	0x69, 0x63, 0x73, 0x12, 0x27, 0x0a, 0x0f, 0x70, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x5f,
	0x6c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x70, 0x61,
	0x63, 0x6b, 0x61, 0x67, 0x65, 0x73, 0x4c, 0x6f, 0x61, 0x64, 0x65, 0x64, 0x1a, 0x95, 0x01, 0x0a,
	0x0d, 0x54, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x23,
	0x0a, 0x0e, 0x63, 0x70, 0x75, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x63, 0x70, 0x75, 0x54, 0x69, 0x6d, 0x65, 0x49,
	0x6e, 0x4d, 0x73, 0x12, 0x25, 0x0a, 0x0f, 0x77, 0x61, 0x6c, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c, 0x77, 0x61,
	0x6c, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x12, 0x38, 0x0a, 0x19, 0x61, 0x6e,
	0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x5f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x6d, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x15, 0x61,
	0x6e, 0x61, 0x6c, 0x79, 0x73, 0x69, 0x73, 0x50, 0x68, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65,
	0x49, 0x6e, 0x4d, 0x73, 0x1a, 0x55, 0x0a, 0x11, 0x43, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x76, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x6e, 0x75, 0x6d,
	0x5f, 0x61, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x75, 0x6d, 0x41, 0x6e, 0x61, 0x6c, 0x79, 0x73, 0x65, 0x73, 0x12, 0x1d, 0x0a, 0x0a,
	0x6e, 0x75, 0x6d, 0x5f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x6e, 0x75, 0x6d, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x73, 0x1a, 0xbd, 0x04, 0x0a, 0x0f,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x70, 0x0a, 0x15, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x13, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x61,
	0x64, 0x12, 0x70, 0x0a, 0x15, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x73, 0x65, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x13,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x53,
	0x65, 0x65, 0x6e, 0x12, 0x88, 0x01, 0x0a, 0x22, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x3c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x2e, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x1e,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x46,
	0x72, 0x6f, 0x6d, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x6c,
	0x0a, 0x13, 0x74, 0x6f, 0x70, 0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x5f, 0x61, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3c, 0x2e, 0x62, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x46, 0x69,
	0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x52, 0x11, 0x74, 0x6f, 0x70, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x1a, 0x47, 0x0a, 0x0b,
	0x46, 0x69, 0x6c, 0x65, 0x73, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x12, 0x22, 0x0a, 0x0d, 0x73,
	0x69, 0x7a, 0x65, 0x5f, 0x69, 0x6e, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x69, 0x7a, 0x65, 0x49, 0x6e, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x1a, 0x80, 0x05, 0x0a, 0x11,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x47, 0x72, 0x61, 0x70, 0x68, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x12, 0x39, 0x0a, 0x19, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x16, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f, 0x6b,
	0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x62, 0x0a, 0x2f,
	0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x5f, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x29, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x6f, 0x6f,
	0x6b, 0x75, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74,
	0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73,
	0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x22, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x5f, 0x6e, 0x6f, 0x74, 0x5f, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x61, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x1e, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4e, 0x6f, 0x74, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x69, 0x6e, 0x67, 0x41, 0x73, 0x70, 0x65, 0x63, 0x74, 0x73, 0x12,
	0x4a, 0x0a, 0x22, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1e, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64,
	0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4c, 0x0a, 0x23, 0x6f,
	0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x46, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x54, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x41, 0x0a, 0x1d, 0x6f, 0x74, 0x68,
	0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x1a, 0x6f, 0x74, 0x68, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x15,
	0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x6f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x4c, 0x0a, 0x23, 0x70, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x73, 0x6b, 0x79, 0x66, 0x72, 0x61, 0x6d, 0x65, 0x5f, 0x6e, 0x6f, 0x64,
	0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1f, 0x70,
	0x6f, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x6b, 0x79,
	0x66, 0x72, 0x61, 0x6d, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x1a, 0x98,
	0x03, 0x0a, 0x0d, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73,
	0x12, 0x1b, 0x0a, 0x09, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x73, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x6c, 0x65, 0x78, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x61, 0x6e, 0x64, 0x62, 0x6f, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x69, 0x73,
	0x5f, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x12,
	0x5d, 0x0a, 0x0c, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d, 0x65,
	0x74, 0x72, 0x69, 0x63, 0x73, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x73, 0x52, 0x0b, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x1a, 0x69,
	0x0a, 0x0b, 0x57, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x73, 0x12, 0x2b, 0x0a,
	0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x69, 0x6e,
	0x5f, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x63, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x49, 0x6e, 0x4d, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x77, 0x6f,
	0x72, 0x6b, 0x65, 0x72, 0x5f, 0x6d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x5f, 0x69, 0x6e, 0x5f, 0x6b,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x77, 0x6f, 0x72, 0x6b, 0x65, 0x72, 0x4d,
	0x65, 0x6d, 0x6f, 0x72, 0x79, 0x49, 0x6e, 0x4b, 0x62, 0x22, 0x3b, 0x0a, 0x0d, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x12, 0x2a, 0x0a, 0x03, 0x6c, 0x6f,
	0x67, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x46, 0x69, 0x6c,
	0x65, 0x52, 0x03, 0x6c, 0x6f, 0x67, 0x22, 0x7a, 0x0a, 0x1d, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e,
	0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x12, 0x59, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x76, 0x65,
	0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65,
	0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x13, 0x63,
	0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e,
	0x6b, 0x73, 0x22, 0xb6, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x53, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74,
	0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x45, 0x0a,
	0x06, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2d, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79,
	0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x22, 0x2d, 0x0a, 0x06,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12,
	0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x02, 0x22, 0xe9, 0x0e, 0x0a, 0x0a,
	0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c,
	0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x08,
	0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x52, 0x08, 0x63, 0x68, 0x69, 0x6c, 0x64, 0x72, 0x65, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x6c, 0x61,
	0x73, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52,
	0x08, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x62, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e,
	0x41, 0x62, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x61, 0x62, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64,
	0x12, 0x69, 0x0a, 0x19, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x55, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x48, 0x00, 0x52, 0x17, 0x75, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x53, 0x0a, 0x17, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x75, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e,
	0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x65, 0x2e, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x15, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x75, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65,
	0x12, 0x4a, 0x0a, 0x0e, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x70, 0x61, 0x72, 0x73,
	0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x50, 0x61, 0x72, 0x73, 0x65, 0x64, 0x12, 0x50, 0x0a, 0x10,
	0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x77,
	0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x31,
	0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x48, 0x00, 0x52, 0x05, 0x66, 0x65, 0x74, 0x63,
	0x68, 0x12, 0x49, 0x0a, 0x0d, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0d, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08,
	0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x50, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x45, 0x78, 0x70, 0x61, 0x6e,
	0x64, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x65, 0x78, 0x70, 0x61, 0x6e, 0x64, 0x65, 0x64, 0x12,
	0x46, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x75, 0x72, 0x65, 0x64, 0x12, 0x3c, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x41, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x06, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x12, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x73,
	0x65, 0x74, 0x5f, 0x6f, 0x66, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4f,
	0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x48, 0x00, 0x52, 0x0f, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x4f, 0x66, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x09, 0x63, 0x6f, 0x6d,
	0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65,
	0x48, 0x00, 0x52, 0x09, 0x63, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x41, 0x0a,
	0x0b, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x12, 0x44, 0x0a, 0x0c, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x54, 0x65, 0x73, 0x74,
	0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x48, 0x00, 0x52, 0x0b, 0x74, 0x65, 0x73, 0x74, 0x53,
	0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x12, 0x4a, 0x0a, 0x0e, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x73, 0x75, 0x6d, 0x6d, 0x61, 0x72, 0x79, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x2e, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61, 0x72,
	0x79, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x53, 0x75, 0x6d, 0x6d, 0x61,
	0x72, 0x79, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x48, 0x00, 0x52, 0x08, 0x66, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x12, 0x4b, 0x0a, 0x0f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x74, 0x6f, 0x6f,
	0x6c, 0x5f, 0x6c, 0x6f, 0x67, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x73, 0x48,
	0x00, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x54, 0x6f, 0x6f, 0x6c, 0x4c, 0x6f, 0x67, 0x73,
	0x12, 0x47, 0x0a, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x75, 0x69,
	0x6c, 0x64, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x4c, 0x0a, 0x0e, 0x77, 0x6f, 0x72,
	0x6b, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x2e, 0x57, 0x6f, 0x72, 0x6b, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0d, 0x77, 0x6f, 0x72, 0x6b, 0x73, 0x70,
	0x61, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4a, 0x0a, 0x0e, 0x62, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x2e, 0x42, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x7b, 0x0a, 0x1f, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x73, 0x79, 0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x69, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x2e, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79, 0x6d,
	0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x1d, 0x63, 0x6f, 0x6e, 0x76, 0x65, 0x6e, 0x69, 0x65, 0x6e, 0x63, 0x65, 0x53, 0x79,
	0x6d, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x64,
	0x42, 0x09, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x04, 0x08, 0x0b, 0x10,
	0x0c, 0x4a, 0x04, 0x08, 0x13, 0x10, 0x14, 0x2a, 0x47, 0x0a, 0x08, 0x54, 0x65, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00,
	0x12, 0x09, 0x0a, 0x05, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x4d,
	0x45, 0x44, 0x49, 0x55, 0x4d, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4c, 0x41, 0x52, 0x47, 0x45,
	0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x45, 0x4e, 0x4f, 0x52, 0x4d, 0x4f, 0x55, 0x53, 0x10, 0x04,
	0x2a, 0xa4, 0x01, 0x0a, 0x0a, 0x54, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x0d, 0x0a, 0x09, 0x4e, 0x4f, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x10, 0x00, 0x12, 0x0a,
	0x0a, 0x06, 0x50, 0x41, 0x53, 0x53, 0x45, 0x44, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c,
	0x41, 0x4b, 0x59, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x49, 0x4d, 0x45, 0x4f, 0x55, 0x54,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0e,
	0x0a, 0x0a, 0x49, 0x4e, 0x43, 0x4f, 0x4d, 0x50, 0x4c, 0x45, 0x54, 0x45, 0x10, 0x05, 0x12, 0x12,
	0x0a, 0x0e, 0x52, 0x45, 0x4d, 0x4f, 0x54, 0x45, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45,
	0x10, 0x06, 0x12, 0x13, 0x0a, 0x0f, 0x46, 0x41, 0x49, 0x4c, 0x45, 0x44, 0x5f, 0x54, 0x4f, 0x5f,
	0x42, 0x55, 0x49, 0x4c, 0x44, 0x10, 0x07, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x4f, 0x4f, 0x4c, 0x5f,
	0x48, 0x41, 0x4c, 0x54, 0x45, 0x44, 0x5f, 0x42, 0x45, 0x46, 0x4f, 0x52, 0x45, 0x5f, 0x54, 0x45,
	0x53, 0x54, 0x49, 0x4e, 0x47, 0x10, 0x08, 0x42, 0x6e, 0x0a, 0x2e, 0x63, 0x6f, 0x6d, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x64, 0x65, 0x76, 0x74, 0x6f, 0x6f, 0x6c, 0x73, 0x2e, 0x62,
	0x75, 0x69, 0x6c, 0x64, 0x2e, 0x6c, 0x69, 0x62, 0x2e, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x16, 0x42, 0x75, 0x69, 0x6c, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x5a, 0x24, 0x62, 0x61, 0x7a, 0x65, 0x6c, 0x2d, 0x77, 0x73, 0x6c, 0x2f, 0x62, 0x65, 0x70,
	0x5f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x62, 0x75, 0x69, 0x6c, 0x64, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_build_event_stream_proto_rawDescOnce sync.Once
	file_build_event_stream_proto_rawDescData = file_build_event_stream_proto_rawDesc
)

func file_build_event_stream_proto_rawDescGZIP() []byte {
	file_build_event_stream_proto_rawDescOnce.Do(func() {
		file_build_event_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_build_event_stream_proto_rawDescData)
	})
	return file_build_event_stream_proto_rawDescData
}

var file_build_event_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_build_event_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 75)
var file_build_event_stream_proto_goTypes = []interface{}{
	(TestSize)(0),                                        // 0: build_event_stream.TestSize
	(TestStatus)(0),                                      // 1: build_event_stream.TestStatus
	(Aborted_AbortReason)(0),                             // 2: build_event_stream.Aborted.AbortReason
	(ConvenienceSymlink_Action)(0),                       // 3: build_event_stream.ConvenienceSymlink.Action
	(*BuildEventId)(nil),                                 // 4: build_event_stream.BuildEventId
	(*Progress)(nil),                                     // 5: build_event_stream.Progress
	(*Aborted)(nil),                                      // 6: build_event_stream.Aborted
	(*BuildStarted)(nil),                                 // 7: build_event_stream.BuildStarted
	(*WorkspaceConfig)(nil),                              // 8: build_event_stream.WorkspaceConfig
	(*UnstructuredCommandLine)(nil),                      // 9: build_event_stream.UnstructuredCommandLine
	(*OptionsParsed)(nil),                                // 10: build_event_stream.OptionsParsed
	(*Fetch)(nil),                                        // 11: build_event_stream.Fetch
	(*WorkspaceStatus)(nil),                              // 12: build_event_stream.WorkspaceStatus
	(*BuildMetadata)(nil),                                // 13: build_event_stream.BuildMetadata
	(*Configuration)(nil),                                // 14: build_event_stream.Configuration
	(*PatternExpanded)(nil),                              // 15: build_event_stream.PatternExpanded
	(*TargetConfigured)(nil),                             // 16: build_event_stream.TargetConfigured
	(*File)(nil),                                         // 17: build_event_stream.File
	(*NamedSetOfFiles)(nil),                              // 18: build_event_stream.NamedSetOfFiles
	(*ActionExecuted)(nil),                               // 19: build_event_stream.ActionExecuted
	(*OutputGroup)(nil),                                  // 20: build_event_stream.OutputGroup
	(*TargetComplete)(nil),                               // 21: build_event_stream.TargetComplete
	(*TestResult)(nil),                                   // 22: build_event_stream.TestResult
	(*TestSummary)(nil),                                  // 23: build_event_stream.TestSummary
	(*TargetSummary)(nil),                                // 24: build_event_stream.TargetSummary
	(*BuildFinished)(nil),                                // 25: build_event_stream.BuildFinished
	(*BuildMetrics)(nil),                                 // 26: build_event_stream.BuildMetrics
	(*BuildToolLogs)(nil),                                // 27: build_event_stream.BuildToolLogs
	(*ConvenienceSymlinksIdentified)(nil),                // 28: build_event_stream.ConvenienceSymlinksIdentified
	(*ConvenienceSymlink)(nil),                           // 29: build_event_stream.ConvenienceSymlink
	(*BuildEvent)(nil),                                   // 30: build_event_stream.BuildEvent
	(*BuildEventId_UnknownBuildEventId)(nil),             // 31: build_event_stream.BuildEventId.UnknownBuildEventId
	(*BuildEventId_ProgressId)(nil),                      // 32: build_event_stream.BuildEventId.ProgressId
	(*BuildEventId_BuildStartedId)(nil),                  // 33: build_event_stream.BuildEventId.BuildStartedId
	(*BuildEventId_UnstructuredCommandLineId)(nil),       // 34: build_event_stream.BuildEventId.UnstructuredCommandLineId
	(*BuildEventId_StructuredCommandLineId)(nil),         // 35: build_event_stream.BuildEventId.StructuredCommandLineId
	(*BuildEventId_WorkspaceStatusId)(nil),               // 36: build_event_stream.BuildEventId.WorkspaceStatusId
	(*BuildEventId_OptionsParsedId)(nil),                 // 37: build_event_stream.BuildEventId.OptionsParsedId
	(*BuildEventId_FetchId)(nil),                         // 38: build_event_stream.BuildEventId.FetchId
	(*BuildEventId_PatternExpandedId)(nil),               // 39: build_event_stream.BuildEventId.PatternExpandedId
	(*BuildEventId_WorkspaceConfigId)(nil),               // 40: build_event_stream.BuildEventId.WorkspaceConfigId
	(*BuildEventId_BuildMetadataId)(nil),                 // 41: build_event_stream.BuildEventId.BuildMetadataId
	(*BuildEventId_TargetConfiguredId)(nil),              // 42: build_event_stream.BuildEventId.TargetConfiguredId
	(*BuildEventId_NamedSetOfFilesId)(nil),               // 43: build_event_stream.BuildEventId.NamedSetOfFilesId
	(*BuildEventId_ConfigurationId)(nil),                 // 44: build_event_stream.BuildEventId.ConfigurationId
	(*BuildEventId_TargetCompletedId)(nil),               // 45: build_event_stream.BuildEventId.TargetCompletedId
	(*BuildEventId_ActionCompletedId)(nil),               // 46: build_event_stream.BuildEventId.ActionCompletedId
	(*BuildEventId_UnconfiguredLabelId)(nil),             // 47: build_event_stream.BuildEventId.UnconfiguredLabelId
	(*BuildEventId_ConfiguredLabelId)(nil),               // 48: build_event_stream.BuildEventId.ConfiguredLabelId
	(*BuildEventId_TestResultId)(nil),                    // 49: build_event_stream.BuildEventId.TestResultId
	(*BuildEventId_TestSummaryId)(nil),                   // 50: build_event_stream.BuildEventId.TestSummaryId
	(*BuildEventId_TargetSummaryId)(nil),                 // 51: build_event_stream.BuildEventId.TargetSummaryId
	(*BuildEventId_BuildFinishedId)(nil),                 // 52: build_event_stream.BuildEventId.BuildFinishedId
	(*BuildEventId_BuildToolLogsId)(nil),                 // 53: build_event_stream.BuildEventId.BuildToolLogsId
	(*BuildEventId_BuildMetricsId)(nil),                  // 54: build_event_stream.BuildEventId.BuildMetricsId
	(*BuildEventId_ConvenienceSymlinksIdentifiedId)(nil), // 55: build_event_stream.BuildEventId.ConvenienceSymlinksIdentifiedId
	(*WorkspaceStatus_Item)(nil),                         // 56: build_event_stream.WorkspaceStatus.Item
	nil,                                                  // 57: build_event_stream.BuildMetadata.MetadataEntry
	nil,                                                  // 58: build_event_stream.Configuration.MakeVariableEntry
	(*PatternExpanded_TestSuiteExpansion)(nil),           // 59: build_event_stream.PatternExpanded.TestSuiteExpansion
	(*TestResult_ExecutionInfo)(nil),                     // 60: build_event_stream.TestResult.ExecutionInfo
	(*TestResult_ExecutionInfo_TimingBreakdown)(nil),     // 61: build_event_stream.TestResult.ExecutionInfo.TimingBreakdown
	(*TestResult_ExecutionInfo_ResourceUsage)(nil),       // 62: build_event_stream.TestResult.ExecutionInfo.ResourceUsage
	(*BuildFinished_ExitCode)(nil),                       // 63: build_event_stream.BuildFinished.ExitCode
	(*BuildFinished_AnomalyReport)(nil),                  // 64: build_event_stream.BuildFinished.AnomalyReport
	(*BuildMetrics_ActionSummary)(nil),                   // 65: build_event_stream.BuildMetrics.ActionSummary
	(*BuildMetrics_MemoryMetrics)(nil),                   // 66: build_event_stream.BuildMetrics.MemoryMetrics
	(*BuildMetrics_TargetMetrics)(nil),                   // 67: build_event_stream.BuildMetrics.TargetMetrics
	(*BuildMetrics_PackageMetrics)(nil),                  // 68: build_event_stream.BuildMetrics.PackageMetrics
	(*BuildMetrics_TimingMetrics)(nil),                   // 69: build_event_stream.BuildMetrics.TimingMetrics
	(*BuildMetrics_CumulativeMetrics)(nil),               // 70: build_event_stream.BuildMetrics.CumulativeMetrics
	(*BuildMetrics_ArtifactMetrics)(nil),                 // 71: build_event_stream.BuildMetrics.ArtifactMetrics
	(*BuildMetrics_BuildGraphMetrics)(nil),               // 72: build_event_stream.BuildMetrics.BuildGraphMetrics
	(*BuildMetrics_WorkerMetrics)(nil),                   // 73: build_event_stream.BuildMetrics.WorkerMetrics
	(*BuildMetrics_ActionSummary_ActionData)(nil),        // 74: build_event_stream.BuildMetrics.ActionSummary.ActionData
	(*BuildMetrics_ActionSummary_RunnerCount)(nil),       // 75: build_event_stream.BuildMetrics.ActionSummary.RunnerCount
	(*BuildMetrics_MemoryMetrics_GarbageMetrics)(nil),    // 76: build_event_stream.BuildMetrics.MemoryMetrics.GarbageMetrics
	(*BuildMetrics_ArtifactMetrics_FilesMetric)(nil),     // 77: build_event_stream.BuildMetrics.ArtifactMetrics.FilesMetric
	(*BuildMetrics_WorkerMetrics_WorkerStats)(nil),       // 78: build_event_stream.BuildMetrics.WorkerMetrics.WorkerStats
	(*timestamppb.Timestamp)(nil),                        // 79: google.protobuf.Timestamp
	(*bep_proto.InvocationPolicy)(nil),                   // 80: blaze.invocation_policy.InvocationPolicy
	(*bep_proto.FailureDetail)(nil),                      // 81: failure_details.FailureDetail
	(*durationpb.Duration)(nil),                          // 82: google.protobuf.Duration
	(*bep_proto.CommandLine)(nil),                        // 83: command_line.CommandLine
}
var file_build_event_stream_proto_depIdxs = []int32{
	31,  // 0: build_event_stream.BuildEventId.unknown:type_name -> build_event_stream.BuildEventId.UnknownBuildEventId
	32,  // 1: build_event_stream.BuildEventId.progress:type_name -> build_event_stream.BuildEventId.ProgressId
	33,  // 2: build_event_stream.BuildEventId.started:type_name -> build_event_stream.BuildEventId.BuildStartedId
	34,  // 3: build_event_stream.BuildEventId.unstructured_command_line:type_name -> build_event_stream.BuildEventId.UnstructuredCommandLineId
	35,  // 4: build_event_stream.BuildEventId.structured_command_line:type_name -> build_event_stream.BuildEventId.StructuredCommandLineId
	36,  // 5: build_event_stream.BuildEventId.workspace_status:type_name -> build_event_stream.BuildEventId.WorkspaceStatusId
	37,  // 6: build_event_stream.BuildEventId.options_parsed:type_name -> build_event_stream.BuildEventId.OptionsParsedId
	38,  // 7: build_event_stream.BuildEventId.fetch:type_name -> build_event_stream.BuildEventId.FetchId
	44,  // 8: build_event_stream.BuildEventId.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	42,  // 9: build_event_stream.BuildEventId.target_configured:type_name -> build_event_stream.BuildEventId.TargetConfiguredId
	39,  // 10: build_event_stream.BuildEventId.pattern:type_name -> build_event_stream.BuildEventId.PatternExpandedId
	39,  // 11: build_event_stream.BuildEventId.pattern_skipped:type_name -> build_event_stream.BuildEventId.PatternExpandedId
	43,  // 12: build_event_stream.BuildEventId.named_set:type_name -> build_event_stream.BuildEventId.NamedSetOfFilesId
	45,  // 13: build_event_stream.BuildEventId.target_completed:type_name -> build_event_stream.BuildEventId.TargetCompletedId
	46,  // 14: build_event_stream.BuildEventId.action_completed:type_name -> build_event_stream.BuildEventId.ActionCompletedId
	47,  // 15: build_event_stream.BuildEventId.unconfigured_label:type_name -> build_event_stream.BuildEventId.UnconfiguredLabelId
	48,  // 16: build_event_stream.BuildEventId.configured_label:type_name -> build_event_stream.BuildEventId.ConfiguredLabelId
	49,  // 17: build_event_stream.BuildEventId.test_result:type_name -> build_event_stream.BuildEventId.TestResultId
	50,  // 18: build_event_stream.BuildEventId.test_summary:type_name -> build_event_stream.BuildEventId.TestSummaryId
	51,  // 19: build_event_stream.BuildEventId.target_summary:type_name -> build_event_stream.BuildEventId.TargetSummaryId
	52,  // 20: build_event_stream.BuildEventId.build_finished:type_name -> build_event_stream.BuildEventId.BuildFinishedId
	53,  // 21: build_event_stream.BuildEventId.build_tool_logs:type_name -> build_event_stream.BuildEventId.BuildToolLogsId
	54,  // 22: build_event_stream.BuildEventId.build_metrics:type_name -> build_event_stream.BuildEventId.BuildMetricsId
	40,  // 23: build_event_stream.BuildEventId.workspace:type_name -> build_event_stream.BuildEventId.WorkspaceConfigId
	41,  // 24: build_event_stream.BuildEventId.build_metadata:type_name -> build_event_stream.BuildEventId.BuildMetadataId
	55,  // 25: build_event_stream.BuildEventId.convenience_symlinks_identified:type_name -> build_event_stream.BuildEventId.ConvenienceSymlinksIdentifiedId
	2,   // 26: build_event_stream.Aborted.reason:type_name -> build_event_stream.Aborted.AbortReason
	79,  // 27: build_event_stream.BuildStarted.start_time:type_name -> google.protobuf.Timestamp
	80,  // 28: build_event_stream.OptionsParsed.invocation_policy:type_name -> blaze.invocation_policy.InvocationPolicy
	56,  // 29: build_event_stream.WorkspaceStatus.item:type_name -> build_event_stream.WorkspaceStatus.Item
	57,  // 30: build_event_stream.BuildMetadata.metadata:type_name -> build_event_stream.BuildMetadata.MetadataEntry
	58,  // 31: build_event_stream.Configuration.make_variable:type_name -> build_event_stream.Configuration.MakeVariableEntry
	59,  // 32: build_event_stream.PatternExpanded.test_suite_expansions:type_name -> build_event_stream.PatternExpanded.TestSuiteExpansion
	0,   // 33: build_event_stream.TargetConfigured.test_size:type_name -> build_event_stream.TestSize
	17,  // 34: build_event_stream.NamedSetOfFiles.files:type_name -> build_event_stream.File
	43,  // 35: build_event_stream.NamedSetOfFiles.file_sets:type_name -> build_event_stream.BuildEventId.NamedSetOfFilesId
	17,  // 36: build_event_stream.ActionExecuted.stdout:type_name -> build_event_stream.File
	17,  // 37: build_event_stream.ActionExecuted.stderr:type_name -> build_event_stream.File
	44,  // 38: build_event_stream.ActionExecuted.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	17,  // 39: build_event_stream.ActionExecuted.primary_output:type_name -> build_event_stream.File
	17,  // 40: build_event_stream.ActionExecuted.action_metadata_logs:type_name -> build_event_stream.File
	81,  // 41: build_event_stream.ActionExecuted.failure_detail:type_name -> failure_details.FailureDetail
	43,  // 42: build_event_stream.OutputGroup.file_sets:type_name -> build_event_stream.BuildEventId.NamedSetOfFilesId
	0,   // 43: build_event_stream.TargetComplete.test_size:type_name -> build_event_stream.TestSize
	20,  // 44: build_event_stream.TargetComplete.output_group:type_name -> build_event_stream.OutputGroup
	17,  // 45: build_event_stream.TargetComplete.important_output:type_name -> build_event_stream.File
	17,  // 46: build_event_stream.TargetComplete.directory_output:type_name -> build_event_stream.File
	82,  // 47: build_event_stream.TargetComplete.test_timeout:type_name -> google.protobuf.Duration
	81,  // 48: build_event_stream.TargetComplete.failure_detail:type_name -> failure_details.FailureDetail
	1,   // 49: build_event_stream.TestResult.status:type_name -> build_event_stream.TestStatus
	79,  // 50: build_event_stream.TestResult.test_attempt_start:type_name -> google.protobuf.Timestamp
	82,  // 51: build_event_stream.TestResult.test_attempt_duration:type_name -> google.protobuf.Duration
	17,  // 52: build_event_stream.TestResult.test_action_output:type_name -> build_event_stream.File
	60,  // 53: build_event_stream.TestResult.execution_info:type_name -> build_event_stream.TestResult.ExecutionInfo
	1,   // 54: build_event_stream.TestSummary.overall_status:type_name -> build_event_stream.TestStatus
	17,  // 55: build_event_stream.TestSummary.passed:type_name -> build_event_stream.File
	17,  // 56: build_event_stream.TestSummary.failed:type_name -> build_event_stream.File
	79,  // 57: build_event_stream.TestSummary.first_start_time:type_name -> google.protobuf.Timestamp
	79,  // 58: build_event_stream.TestSummary.last_stop_time:type_name -> google.protobuf.Timestamp
	82,  // 59: build_event_stream.TestSummary.total_run_duration:type_name -> google.protobuf.Duration
	1,   // 60: build_event_stream.TargetSummary.overall_test_status:type_name -> build_event_stream.TestStatus
	63,  // 61: build_event_stream.BuildFinished.exit_code:type_name -> build_event_stream.BuildFinished.ExitCode
	79,  // 62: build_event_stream.BuildFinished.finish_time:type_name -> google.protobuf.Timestamp
	64,  // 63: build_event_stream.BuildFinished.anomaly_report:type_name -> build_event_stream.BuildFinished.AnomalyReport
	65,  // 64: build_event_stream.BuildMetrics.action_summary:type_name -> build_event_stream.BuildMetrics.ActionSummary
	66,  // 65: build_event_stream.BuildMetrics.memory_metrics:type_name -> build_event_stream.BuildMetrics.MemoryMetrics
	67,  // 66: build_event_stream.BuildMetrics.target_metrics:type_name -> build_event_stream.BuildMetrics.TargetMetrics
	68,  // 67: build_event_stream.BuildMetrics.package_metrics:type_name -> build_event_stream.BuildMetrics.PackageMetrics
	69,  // 68: build_event_stream.BuildMetrics.timing_metrics:type_name -> build_event_stream.BuildMetrics.TimingMetrics
	70,  // 69: build_event_stream.BuildMetrics.cumulative_metrics:type_name -> build_event_stream.BuildMetrics.CumulativeMetrics
	71,  // 70: build_event_stream.BuildMetrics.artifact_metrics:type_name -> build_event_stream.BuildMetrics.ArtifactMetrics
	72,  // 71: build_event_stream.BuildMetrics.build_graph_metrics:type_name -> build_event_stream.BuildMetrics.BuildGraphMetrics
	73,  // 72: build_event_stream.BuildMetrics.worker_metrics:type_name -> build_event_stream.BuildMetrics.WorkerMetrics
	17,  // 73: build_event_stream.BuildToolLogs.log:type_name -> build_event_stream.File
	29,  // 74: build_event_stream.ConvenienceSymlinksIdentified.convenience_symlinks:type_name -> build_event_stream.ConvenienceSymlink
	3,   // 75: build_event_stream.ConvenienceSymlink.action:type_name -> build_event_stream.ConvenienceSymlink.Action
	4,   // 76: build_event_stream.BuildEvent.id:type_name -> build_event_stream.BuildEventId
	4,   // 77: build_event_stream.BuildEvent.children:type_name -> build_event_stream.BuildEventId
	5,   // 78: build_event_stream.BuildEvent.progress:type_name -> build_event_stream.Progress
	6,   // 79: build_event_stream.BuildEvent.aborted:type_name -> build_event_stream.Aborted
	7,   // 80: build_event_stream.BuildEvent.started:type_name -> build_event_stream.BuildStarted
	9,   // 81: build_event_stream.BuildEvent.unstructured_command_line:type_name -> build_event_stream.UnstructuredCommandLine
	83,  // 82: build_event_stream.BuildEvent.structured_command_line:type_name -> command_line.CommandLine
	10,  // 83: build_event_stream.BuildEvent.options_parsed:type_name -> build_event_stream.OptionsParsed
	12,  // 84: build_event_stream.BuildEvent.workspace_status:type_name -> build_event_stream.WorkspaceStatus
	11,  // 85: build_event_stream.BuildEvent.fetch:type_name -> build_event_stream.Fetch
	14,  // 86: build_event_stream.BuildEvent.configuration:type_name -> build_event_stream.Configuration
	15,  // 87: build_event_stream.BuildEvent.expanded:type_name -> build_event_stream.PatternExpanded
	16,  // 88: build_event_stream.BuildEvent.configured:type_name -> build_event_stream.TargetConfigured
	19,  // 89: build_event_stream.BuildEvent.action:type_name -> build_event_stream.ActionExecuted
	18,  // 90: build_event_stream.BuildEvent.named_set_of_files:type_name -> build_event_stream.NamedSetOfFiles
	21,  // 91: build_event_stream.BuildEvent.completed:type_name -> build_event_stream.TargetComplete
	22,  // 92: build_event_stream.BuildEvent.test_result:type_name -> build_event_stream.TestResult
	23,  // 93: build_event_stream.BuildEvent.test_summary:type_name -> build_event_stream.TestSummary
	24,  // 94: build_event_stream.BuildEvent.target_summary:type_name -> build_event_stream.TargetSummary
	25,  // 95: build_event_stream.BuildEvent.finished:type_name -> build_event_stream.BuildFinished
	27,  // 96: build_event_stream.BuildEvent.build_tool_logs:type_name -> build_event_stream.BuildToolLogs
	26,  // 97: build_event_stream.BuildEvent.build_metrics:type_name -> build_event_stream.BuildMetrics
	8,   // 98: build_event_stream.BuildEvent.workspace_info:type_name -> build_event_stream.WorkspaceConfig
	13,  // 99: build_event_stream.BuildEvent.build_metadata:type_name -> build_event_stream.BuildMetadata
	28,  // 100: build_event_stream.BuildEvent.convenience_symlinks_identified:type_name -> build_event_stream.ConvenienceSymlinksIdentified
	44,  // 101: build_event_stream.BuildEventId.TargetCompletedId.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	44,  // 102: build_event_stream.BuildEventId.ActionCompletedId.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	44,  // 103: build_event_stream.BuildEventId.ConfiguredLabelId.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	44,  // 104: build_event_stream.BuildEventId.TestResultId.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	44,  // 105: build_event_stream.BuildEventId.TestSummaryId.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	44,  // 106: build_event_stream.BuildEventId.TargetSummaryId.configuration:type_name -> build_event_stream.BuildEventId.ConfigurationId
	61,  // 107: build_event_stream.TestResult.ExecutionInfo.timing_breakdown:type_name -> build_event_stream.TestResult.ExecutionInfo.TimingBreakdown
	62,  // 108: build_event_stream.TestResult.ExecutionInfo.resource_usage:type_name -> build_event_stream.TestResult.ExecutionInfo.ResourceUsage
	61,  // 109: build_event_stream.TestResult.ExecutionInfo.TimingBreakdown.child:type_name -> build_event_stream.TestResult.ExecutionInfo.TimingBreakdown
	82,  // 110: build_event_stream.TestResult.ExecutionInfo.TimingBreakdown.time:type_name -> google.protobuf.Duration
	74,  // 111: build_event_stream.BuildMetrics.ActionSummary.action_data:type_name -> build_event_stream.BuildMetrics.ActionSummary.ActionData
	75,  // 112: build_event_stream.BuildMetrics.ActionSummary.runner_count:type_name -> build_event_stream.BuildMetrics.ActionSummary.RunnerCount
	76,  // 113: build_event_stream.BuildMetrics.MemoryMetrics.garbage_metrics:type_name -> build_event_stream.BuildMetrics.MemoryMetrics.GarbageMetrics
	77,  // 114: build_event_stream.BuildMetrics.ArtifactMetrics.source_artifacts_read:type_name -> build_event_stream.BuildMetrics.ArtifactMetrics.FilesMetric
	77,  // 115: build_event_stream.BuildMetrics.ArtifactMetrics.output_artifacts_seen:type_name -> build_event_stream.BuildMetrics.ArtifactMetrics.FilesMetric
	77,  // 116: build_event_stream.BuildMetrics.ArtifactMetrics.output_artifacts_from_action_cache:type_name -> build_event_stream.BuildMetrics.ArtifactMetrics.FilesMetric
	77,  // 117: build_event_stream.BuildMetrics.ArtifactMetrics.top_level_artifacts:type_name -> build_event_stream.BuildMetrics.ArtifactMetrics.FilesMetric
	78,  // 118: build_event_stream.BuildMetrics.WorkerMetrics.worker_stats:type_name -> build_event_stream.BuildMetrics.WorkerMetrics.WorkerStats
	119, // [119:119] is the sub-list for method output_type
	119, // [119:119] is the sub-list for method input_type
	119, // [119:119] is the sub-list for extension type_name
	119, // [119:119] is the sub-list for extension extendee
	0,   // [0:119] is the sub-list for field type_name
}

func init() { file_build_event_stream_proto_init() }
func file_build_event_stream_proto_init() {
	if File_build_event_stream_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_build_event_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Progress); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Aborted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildStarted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UnstructuredCommandLine); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OptionsParsed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Fetch); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternExpanded); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetConfigured); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*File); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamedSetOfFiles); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ActionExecuted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutputGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetComplete); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TargetSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildFinished); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildToolLogs); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvenienceSymlinksIdentified); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConvenienceSymlink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_UnknownBuildEventId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_ProgressId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_BuildStartedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_UnstructuredCommandLineId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_StructuredCommandLineId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_WorkspaceStatusId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_OptionsParsedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_FetchId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_PatternExpandedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_WorkspaceConfigId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_BuildMetadataId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_TargetConfiguredId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_NamedSetOfFilesId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_ConfigurationId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_TargetCompletedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_ActionCompletedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_UnconfiguredLabelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_ConfiguredLabelId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_TestResultId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_TestSummaryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_TargetSummaryId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_BuildFinishedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_BuildToolLogsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_BuildMetricsId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildEventId_ConvenienceSymlinksIdentifiedId); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WorkspaceStatus_Item); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PatternExpanded_TestSuiteExpansion); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult_ExecutionInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult_ExecutionInfo_TimingBreakdown); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TestResult_ExecutionInfo_ResourceUsage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildFinished_ExitCode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildFinished_AnomalyReport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_ActionSummary); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_MemoryMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_TargetMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_PackageMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_TimingMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_CumulativeMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_ArtifactMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_BuildGraphMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_WorkerMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_ActionSummary_ActionData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_ActionSummary_RunnerCount); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_MemoryMetrics_GarbageMetrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_ArtifactMetrics_FilesMetric); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_build_event_stream_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BuildMetrics_WorkerMetrics_WorkerStats); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_build_event_stream_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BuildEventId_Unknown)(nil),
		(*BuildEventId_Progress)(nil),
		(*BuildEventId_Started)(nil),
		(*BuildEventId_UnstructuredCommandLine)(nil),
		(*BuildEventId_StructuredCommandLine)(nil),
		(*BuildEventId_WorkspaceStatus)(nil),
		(*BuildEventId_OptionsParsed)(nil),
		(*BuildEventId_Fetch)(nil),
		(*BuildEventId_Configuration)(nil),
		(*BuildEventId_TargetConfigured)(nil),
		(*BuildEventId_Pattern)(nil),
		(*BuildEventId_PatternSkipped)(nil),
		(*BuildEventId_NamedSet)(nil),
		(*BuildEventId_TargetCompleted)(nil),
		(*BuildEventId_ActionCompleted)(nil),
		(*BuildEventId_UnconfiguredLabel)(nil),
		(*BuildEventId_ConfiguredLabel)(nil),
		(*BuildEventId_TestResult)(nil),
		(*BuildEventId_TestSummary)(nil),
		(*BuildEventId_TargetSummary)(nil),
		(*BuildEventId_BuildFinished)(nil),
		(*BuildEventId_BuildToolLogs)(nil),
		(*BuildEventId_BuildMetrics)(nil),
		(*BuildEventId_Workspace)(nil),
		(*BuildEventId_BuildMetadata)(nil),
		(*BuildEventId_ConvenienceSymlinksIdentified)(nil),
	}
	file_build_event_stream_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*File_Uri)(nil),
		(*File_Contents)(nil),
	}
	file_build_event_stream_proto_msgTypes[26].OneofWrappers = []interface{}{
		(*BuildEvent_Progress)(nil),
		(*BuildEvent_Aborted)(nil),
		(*BuildEvent_Started)(nil),
		(*BuildEvent_UnstructuredCommandLine)(nil),
		(*BuildEvent_StructuredCommandLine)(nil),
		(*BuildEvent_OptionsParsed)(nil),
		(*BuildEvent_WorkspaceStatus)(nil),
		(*BuildEvent_Fetch)(nil),
		(*BuildEvent_Configuration)(nil),
		(*BuildEvent_Expanded)(nil),
		(*BuildEvent_Configured)(nil),
		(*BuildEvent_Action)(nil),
		(*BuildEvent_NamedSetOfFiles)(nil),
		(*BuildEvent_Completed)(nil),
		(*BuildEvent_TestResult)(nil),
		(*BuildEvent_TestSummary)(nil),
		(*BuildEvent_TargetSummary)(nil),
		(*BuildEvent_Finished)(nil),
		(*BuildEvent_BuildToolLogs)(nil),
		(*BuildEvent_BuildMetrics)(nil),
		(*BuildEvent_WorkspaceInfo)(nil),
		(*BuildEvent_BuildMetadata)(nil),
		(*BuildEvent_ConvenienceSymlinksIdentified)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_build_event_stream_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   75,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_build_event_stream_proto_goTypes,
		DependencyIndexes: file_build_event_stream_proto_depIdxs,
		EnumInfos:         file_build_event_stream_proto_enumTypes,
		MessageInfos:      file_build_event_stream_proto_msgTypes,
	}.Build()
	File_build_event_stream_proto = out.File
	file_build_event_stream_proto_rawDesc = nil
	file_build_event_stream_proto_goTypes = nil
	file_build_event_stream_proto_depIdxs = nil
}
